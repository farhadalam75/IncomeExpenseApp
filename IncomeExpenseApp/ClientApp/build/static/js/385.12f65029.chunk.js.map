{"version":3,"file":"static/js/385.12f65029.chunk.js","mappings":"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","sources":["services/api.ts","components/Dashboard.tsx"],"sourcesContent":["import axios from 'axios';\n\n// API configuration - use relative path since React and API are served from same server\nconst API_BASE_URL = '/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Types\nexport interface Transaction {\n  id: number;\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  date: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TransactionCreateDto {\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  date: string;\n  notes?: string;\n}\n\nexport interface TransactionUpdateDto {\n  description?: string;\n  amount?: number;\n  type?: TransactionType;\n  category?: string;\n  date?: string;\n  notes?: string;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  description?: string;\n  type: TransactionType;\n  isDefault: boolean;\n  createdAt: string;\n}\n\nexport interface CategoryCreateDto {\n  name: string;\n  description?: string;\n  type: TransactionType;\n}\n\nexport interface Summary {\n  totalIncome: number;\n  totalExpense: number;\n  balance: number;\n  fromDate?: string;\n  toDate?: string;\n}\n\nexport enum TransactionType {\n  Income = 1,\n  Expense = 2,\n}\n\n// API functions\nexport const transactionApi = {\n  // Get all transactions with optional filters\n  getAll: (params?: {\n    type?: TransactionType;\n    category?: string;\n    fromDate?: string;\n    toDate?: string;\n    page?: number;\n    pageSize?: number;\n  }) => api.get<Transaction[]>('/transactions', { params }),\n\n  // Get transaction by ID\n  getById: (id: number) => api.get<Transaction>(`/transactions/${id}`),\n\n  // Create new transaction\n  create: (transaction: TransactionCreateDto) => \n    api.post<Transaction>('/transactions', transaction),\n\n  // Update transaction\n  update: (id: number, transaction: TransactionUpdateDto) => \n    api.put<Transaction>(`/transactions/${id}`, transaction),\n\n  // Delete transaction\n  delete: (id: number) => api.delete(`/transactions/${id}`),\n\n  // Get summary\n  getSummary: (fromDate?: string, toDate?: string) => \n    api.get<Summary>('/transactions/summary', { \n      params: { fromDate, toDate } \n    }),\n};\n\nexport const categoryApi = {\n  // Get all categories with optional type filter\n  getAll: (type?: TransactionType) => \n    api.get<Category[]>('/categories', { params: { type } }),\n\n  // Get category by ID\n  getById: (id: number) => api.get<Category>(`/categories/${id}`),\n\n  // Create new category\n  create: (category: CategoryCreateDto) => \n    api.post<Category>('/categories', category),\n\n  // Update category\n  update: (id: number, category: Partial<CategoryCreateDto>) => \n    api.put<Category>(`/categories/${id}`, category),\n\n  // Delete category\n  delete: (id: number) => api.delete(`/categories/${id}`),\n};\n\nexport default api;","import React, { useState, useEffect, memo } from 'react';\nimport { transactionApi, Transaction, Summary, TransactionType } from '../services/api';\n\ninterface DashboardProps {\n  onNavigate: (page: 'dashboard' | 'add-transaction' | 'transactions' | 'categories') => void;\n}\n\nconst Dashboard: React.FC<DashboardProps> = memo(({ onNavigate }) => {\n  const [summary, setSummary] = useState<Summary | null>(null);\n  const [recentTransactions, setRecentTransactions] = useState<Transaction[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Load summary and recent transactions in parallel\n      const [summaryResponse, transactionsResponse] = await Promise.all([\n        transactionApi.getSummary(),\n        transactionApi.getAll({ pageSize: 5 })\n      ]);\n\n      setSummary(summaryResponse.data);\n      setRecentTransactions(transactionsResponse.data);\n    } catch (err) {\n      setError('Failed to load dashboard data');\n      console.error('Dashboard error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"glass-card\">\n        <div className=\"loading\">Loading dashboard...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"glass-card\">\n        <div className=\"error\">{error}</div>\n        <button className=\"btn btn-primary\" onClick={loadDashboardData}>\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h1 style={{ color: 'white', marginBottom: '2rem', textAlign: 'center' }}>\n        Dashboard\n      </h1>\n      \n      {/* Summary Cards */}\n      {summary && (\n        <div className=\"dashboard\">\n          <div className=\"stat-card income\">\n            <div className=\"stat-value\">{formatCurrency(summary.totalIncome)}</div>\n            <div className=\"stat-label\">Total Income</div>\n          </div>\n          <div className=\"stat-card expense\">\n            <div className=\"stat-value\">{formatCurrency(summary.totalExpense)}</div>\n            <div className=\"stat-label\">Total Expenses</div>\n          </div>\n          <div className=\"stat-card balance\">\n            <div className=\"stat-value\">{formatCurrency(summary.balance)}</div>\n            <div className=\"stat-label\">Net Balance</div>\n          </div>\n        </div>\n      )}\n\n      {/* Quick Actions */}\n      <div style={{ \n        display: 'grid', \n        gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', \n        gap: '1rem',\n        margin: '2rem 0'\n      }}>\n        <div \n          className=\"glass-card quick-action-card\"\n          onClick={() => onNavigate('add-transaction')}\n          style={{\n            cursor: 'pointer',\n            padding: '1.5rem',\n            textAlign: 'center',\n            transition: 'all 0.3s ease',\n            border: '2px solid rgba(34, 197, 94, 0.2)'\n          }}\n        >\n          <div style={{ fontSize: '2rem', marginBottom: '1rem' }}>➕</div>\n          <h3 style={{ color: '#4ade80', marginBottom: '0.5rem' }}>Add Transaction</h3>\n          <p style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '0.9rem' }}>\n            Record a new income or expense\n          </p>\n        </div>\n        \n        <div \n          className=\"glass-card quick-action-card\"\n          onClick={() => onNavigate('transactions')}\n          style={{\n            cursor: 'pointer',\n            padding: '1.5rem',\n            textAlign: 'center',\n            transition: 'all 0.3s ease',\n            border: '2px solid rgba(59, 130, 246, 0.2)'\n          }}\n        >\n          <div style={{ fontSize: '2rem', marginBottom: '1rem' }}>📊</div>\n          <h3 style={{ color: '#60a5fa', marginBottom: '0.5rem' }}>View All Transactions</h3>\n          <p style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '0.9rem' }}>\n            Browse and filter your transactions\n          </p>\n        </div>\n        \n        <div \n          className=\"glass-card quick-action-card\"\n          onClick={() => onNavigate('categories')}\n          style={{\n            cursor: 'pointer',\n            padding: '1.5rem',\n            textAlign: 'center',\n            transition: 'all 0.3s ease',\n            border: '2px solid rgba(168, 85, 247, 0.2)'\n          }}\n        >\n          <div style={{ fontSize: '2rem', marginBottom: '1rem' }}>⚙️</div>\n          <h3 style={{ color: '#a855f7', marginBottom: '0.5rem' }}>Manage Categories</h3>\n          <p style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '0.9rem' }}>\n            Add or edit transaction categories\n          </p>\n        </div>\n      </div>\n\n      {/* Recent Transactions */}\n      <div className=\"glass-card\" style={{ marginTop: '2rem' }}>\n        <h2 style={{ color: 'white', marginBottom: '1.5rem' }}>\n          Recent Transactions\n        </h2>\n        \n        {recentTransactions.length > 0 ? (\n          <div className=\"table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Description</th>\n                  <th>Category</th>\n                  <th>Type</th>\n                  <th>Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {recentTransactions.map((transaction) => (\n                  <tr key={transaction.id}>\n                    <td>{formatDate(transaction.date)}</td>\n                    <td>{transaction.description}</td>\n                    <td>{transaction.category}</td>\n                    <td>\n                      <span\n                        style={{\n                          color: transaction.type === TransactionType.Income ? '#4ade80' : '#f87171',\n                          fontWeight: 'bold',\n                        }}\n                      >\n                        {transaction.type === TransactionType.Income ? 'Income' : 'Expense'}\n                      </span>\n                    </td>\n                    <td\n                      style={{\n                        color: transaction.type === TransactionType.Income ? '#4ade80' : '#f87171',\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {transaction.type === TransactionType.Income ? '+' : '-'}\n                      {formatCurrency(Math.abs(transaction.amount))}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <div style={{ textAlign: 'center', color: 'rgba(255, 255, 255, 0.7)', padding: '2rem' }}>\n            No transactions found. Start by adding your first transaction!\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default Dashboard;"],"names":["api","axios","create","baseURL","headers","TransactionType","transactionApi","getAll","params","get","getById","id","concat","transaction","post","update","put","delete","getSummary","fromDate","toDate","categoryApi","type","category","memo","_ref","onNavigate","summary","setSummary","useState","recentTransactions","setRecentTransactions","loading","setLoading","error","setError","useEffect","loadDashboardData","async","summaryResponse","transactionsResponse","Promise","all","pageSize","data","err","console","formatCurrency","amount","Intl","NumberFormat","style","currency","format","_jsx","className","children","_jsxs","onClick","color","marginBottom","textAlign","totalIncome","totalExpense","balance","display","gridTemplateColumns","gap","margin","cursor","padding","transition","border","fontSize","marginTop","length","map","dateString","date","Date","toLocaleDateString","year","month","day","description","Income","fontWeight","Math","abs"],"sourceRoot":""}