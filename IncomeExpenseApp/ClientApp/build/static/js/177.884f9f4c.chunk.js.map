{"version":3,"file":"static/js/177.884f9f4c.chunk.js","mappings":"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","sources":["components/Settings.tsx","services/api.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport { transactionApi } from '../services/api';\nimport './Settings.css';\n\nconst Settings: React.FC = () => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [showConfirm, setShowConfirm] = useState(false);\n\n  const handleDeleteAll = async () => {\n    if (!showConfirm) {\n      setShowConfirm(true);\n      return;\n    }\n\n    try {\n      setIsDeleting(true);\n      const response = await transactionApi.deleteAll();\n      \n      alert('‚úÖ All transactions deleted and account balances reset to zero!');\n      \n      // Reset confirmation state\n      setShowConfirm(false);\n      \n      // Refresh the page to update all components\n      window.location.reload();\n    } catch (error) {\n      console.error('Error deleting transactions:', error);\n      alert('‚ùå Error deleting transactions. Please try again.');\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  const handleCancelDelete = () => {\n    setShowConfirm(false);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"page-header\">\n        <h1>‚öôÔ∏è Settings</h1>\n      </div>\n\n      <div className=\"settings-content\">\n        <div className=\"settings-section\">\n          <h2>Data Management</h2>\n          <p className=\"settings-description\">\n            Manage your transaction data and account information.\n          </p>\n\n          <div className=\"danger-zone\">\n            <h3>‚ö†Ô∏è Danger Zone</h3>\n            <div className=\"danger-action\">\n              <div className=\"action-info\">\n                <h4>Reset All Data</h4>\n                <p>\n                  This will permanently delete all transactions and reset all account balances to zero. \n                  This action cannot be undone.\n                </p>\n              </div>\n              \n              {!showConfirm ? (\n                <button\n                  className=\"btn-danger\"\n                  onClick={handleDeleteAll}\n                  disabled={isDeleting}\n                  title=\"Delete all transactions and reset account balances\"\n                >\n                  <span className=\"gear-icon\">‚öôÔ∏è</span>\n                  Reset All Data\n                </button>\n              ) : (\n                <div className=\"confirm-actions\">\n                  <p className=\"confirm-text\">\n                    ‚ö†Ô∏è Are you sure? This will delete ALL transactions and reset account balances to zero!\n                  </p>\n                  <div className=\"confirm-buttons\">\n                    <button\n                      className=\"btn-danger-confirm\"\n                      onClick={handleDeleteAll}\n                      disabled={isDeleting}\n                    >\n                      {isDeleting ? 'üîÑ Deleting...' : '‚úÖ Yes, Delete All'}\n                    </button>\n                    <button\n                      className=\"btn-cancel\"\n                      onClick={handleCancelDelete}\n                      disabled={isDeleting}\n                    >\n                      ‚ùå Cancel\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"settings-section\">\n          <h2>About</h2>\n          <div className=\"about-info\">\n            <p><strong>Income Expense App</strong></p>\n            <p>Version: 1.0.0</p>\n            <p>A simple and elegant way to track your income, expenses, and transfers.</p>\n          </div>\n        </div>\n      </div>\n\n\n    </div>\n  );\n};\n\nexport default Settings;","import axios from 'axios';\n\n// API configuration - use relative path since React and API are served from same server\nconst API_BASE_URL = '/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Types\nexport interface Transaction {\n  id: number;\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  accountId: number;\n  accountName?: string;\n  accountIcon?: string;\n  date: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TransactionCreateDto {\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  accountId: number;\n  date: string;\n}\n\nexport interface TransactionUpdateDto {\n  description?: string;\n  amount?: number;\n  type?: TransactionType;\n  category?: string;\n  accountId?: number;\n  date?: string;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  description?: string;\n  type: TransactionType;\n  isDefault: boolean;\n  createdAt: string;\n  transactionCount?: number;\n  totalAmount?: number;\n}\n\nexport interface CategoryCreateDto {\n  name: string;\n  description?: string;\n  type: TransactionType;\n}\n\nexport interface Account {\n  id: number;\n  name: string;\n  description?: string;\n  type: AccountType;\n  icon: string;\n  balance: number;\n  isDefault: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TransferDto {\n  fromAccountId: number;\n  toAccountId: number;\n  amount: number;\n  description?: string;\n  date: string;\n}\n\nexport interface AccountCreateDto {\n  name: string;\n  description?: string;\n  type: AccountType;\n  icon: string;\n}\n\nexport interface AccountUpdateDto {\n  name?: string;\n  description?: string;\n  type?: AccountType;\n  icon?: string;\n}\n\nexport enum AccountType {\n  Cash = 0,\n  Bank = 1,\n  CreditCard = 2,\n  Investment = 3,\n  Savings = 4,\n  Other = 5,\n}\n\nexport interface Summary {\n  totalIncome: number;\n  totalExpense: number;\n  balance: number;\n  fromDate?: string;\n  toDate?: string;\n}\n\nexport enum TransactionType {\n  Income = 1,\n  Expense = 2,\n}\n\n// API functions\nexport const transactionApi = {\n  // Get all transactions with optional filters\n  getAll: (params?: {\n    type?: TransactionType;\n    category?: string;\n    fromDate?: string;\n    toDate?: string;\n    page?: number;\n    pageSize?: number;\n  }) => api.get<Transaction[]>('/transactions', { params }),\n\n  // Get transaction by ID\n  getById: (id: number) => api.get<Transaction>(`/transactions/${id}`),\n\n  // Create new transaction\n  create: (transaction: TransactionCreateDto) => \n    api.post<Transaction>('/transactions', transaction),\n\n  // Update transaction\n  update: (id: number, transaction: TransactionUpdateDto) => \n    api.put<Transaction>(`/transactions/${id}`, transaction),\n\n  // Delete transaction\n  delete: (id: number) => api.delete(`/transactions/${id}`),\n\n  // Get summary\n  getSummary: (fromDate?: string, toDate?: string) => \n    api.get<Summary>('/transactions/summary', { \n      params: { fromDate, toDate } \n    }),\n\n  // Delete all transactions\n  deleteAll: () => api.delete('/transactions/all'),\n};\n\nexport const categoryApi = {\n  // Get all categories with optional type filter\n  getAll: (type?: TransactionType) => \n    api.get<Category[]>('/categories', { params: { type } }),\n\n  // Get category by ID\n  getById: (id: number) => api.get<Category>(`/categories/${id}`),\n\n  // Create new category\n  create: (category: CategoryCreateDto) => \n    api.post<Category>('/categories', category),\n\n  // Update category\n  update: (id: number, category: Partial<CategoryCreateDto>) => \n    api.put<Category>(`/categories/${id}`, category),\n\n  // Delete category\n  delete: (id: number) => api.delete(`/categories/${id}`),\n};\n\nexport const accountApi = {\n  // Get all accounts\n  getAll: () => api.get<Account[]>('/accounts'),\n\n  // Get account by ID\n  getById: (id: number) => api.get<Account>(`/accounts/${id}`),\n\n  // Create new account\n  create: (account: AccountCreateDto) => \n    api.post<Account>('/accounts', account),\n\n  // Update account\n  update: (id: number, account: AccountUpdateDto) => \n    api.put<Account>(`/accounts/${id}`, account),\n\n  // Delete account\n  delete: (id: number) => api.delete(`/accounts/${id}`),\n\n  // Adjust account balance\n  adjustBalance: (id: number, amount: number) => \n    api.post(`/accounts/${id}/adjust-balance`, { amount }),\n    \n  // Transfer money between accounts\n  transfer: (data: TransferDto) => api.post('/accounts/transfer', data),\n};\n\nexport default api;"],"names":["Settings","isDeleting","setIsDeleting","useState","showConfirm","setShowConfirm","handleDeleteAll","async","transactionApi","deleteAll","alert","window","location","reload","error","console","_jsxs","className","children","_jsx","onClick","disabled","handleCancelDelete","title","api","axios","create","baseURL","headers","TransactionType","getAll","params","get","getById","id","concat","transaction","post","update","put","delete","getSummary","fromDate","toDate","categoryApi","type","category","accountApi","account","adjustBalance","amount","transfer","data"],"sourceRoot":""}