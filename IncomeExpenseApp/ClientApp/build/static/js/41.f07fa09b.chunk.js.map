{"version":3,"file":"static/js/41.f07fa09b.chunk.js","mappings":"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","sources":["components/TransactionList.tsx","services/api.ts"],"sourcesContent":["import React, { useState, useEffect, memo, useCallback, useMemo } from 'react';\nimport { transactionApi, Transaction, TransactionType, categoryApi, Category } from '../services/api';\n\ninterface TransactionListProps {\n  onNavigate?: (page: 'dashboard' | 'add-transaction' | 'transactions' | 'categories') => void;\n  onBack?: () => void;\n}\n\nconst TransactionList: React.FC<TransactionListProps> = memo(({ onNavigate, onBack }) => {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Filters - separate applied from draft to optimize performance\n  const [appliedFilters, setAppliedFilters] = useState({\n    type: '' as string,\n    category: '',\n    fromDate: '',\n    toDate: '',\n  });\n  \n  const [draftFilters, setDraftFilters] = useState({\n    type: '' as string,\n    category: '',\n    fromDate: '',\n    toDate: '',\n  });\n\n  // Pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize] = useState(10);\n\n  // Memoize expensive operations\n  const loadTransactionsCallback = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const params = {\n        page: currentPage,\n        pageSize,\n        ...(appliedFilters.type && { type: parseInt(appliedFilters.type) as TransactionType }),\n        ...(appliedFilters.category && { category: appliedFilters.category }),\n        ...(appliedFilters.fromDate && { fromDate: appliedFilters.fromDate }),\n        ...(appliedFilters.toDate && { toDate: appliedFilters.toDate }),\n      };\n\n      const response = await transactionApi.getAll(params);\n      setTransactions(response.data);\n    } catch (err) {\n      console.error('Error loading transactions:', err);\n      setError('Failed to load transactions');\n    } finally {\n      setLoading(false);\n    }\n  }, [appliedFilters, currentPage]);\n\n  const loadCategoriesCallback = useCallback(async () => {\n    try {\n      const response = await categoryApi.getAll();\n      setCategories(response.data);\n    } catch (err) {\n      console.error('Error loading categories:', err);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadTransactionsCallback();\n    loadCategoriesCallback();\n  }, [loadTransactionsCallback, loadCategoriesCallback]);\n\n  // Memoized filtered categories for better performance\n  const filteredCategories = useMemo(() => {\n    return categories.filter(cat => \n      !draftFilters.type || cat.type === parseInt(draftFilters.type)\n    );\n  }, [categories, draftFilters.type]);\n\n  const handleDelete = async (id: number) => {\n    if (!window.confirm('Are you sure you want to delete this transaction?')) {\n      return;\n    }\n\n    try {\n      await transactionApi.delete(id);\n      setTransactions(transactions.filter(t => t.id !== id));\n    } catch (err) {\n      setError('Failed to delete transaction');\n      console.error('Transaction deletion error:', err);\n    }\n  };\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setDraftFilters(prev => ({ ...prev, [name]: value }));\n  }, []);\n\n  const applyFilters = useCallback(() => {\n    setAppliedFilters(draftFilters);\n    setCurrentPage(1);\n  }, [draftFilters]);\n\n  const clearFilters = useCallback(() => {\n    const emptyFilters = {\n      type: '',\n      category: '',\n      fromDate: '',\n      toDate: '',\n    };\n    setDraftFilters(emptyFilters);\n    setAppliedFilters(emptyFilters);\n    setCurrentPage(1);\n  }, []);\n\n  const hasFilterChanges = useMemo(() => {\n    return JSON.stringify(appliedFilters) !== JSON.stringify(draftFilters);\n  }, [appliedFilters, draftFilters]);\n\n  const formatCurrency = (amount: number) => {\n    return `৳${amount.toLocaleString('en-BD', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    })}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    try {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      if (isNaN(date.getTime())) return 'Invalid Date';\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n      });\n    } catch {\n      return 'Invalid Date';\n    }\n  };\n\n  return (\n    <div>\n      <h1 style={{ color: 'white', marginBottom: '2rem', textAlign: 'center' }}>\n        Transactions\n      </h1>\n\n      {/* Filters */}\n      <div className=\"glass-card\" style={{ marginBottom: '2rem' }}>\n        <h3 style={{ color: 'white', marginBottom: '1rem' }}>Filters</h3>\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', \n          gap: '1rem',\n          alignItems: 'end'\n        }}>\n          <div>\n            <label className=\"form-label\">Type</label>\n            <select\n              name=\"type\"\n              value={draftFilters.type}\n              onChange={handleFilterChange}\n              className=\"form-control\"\n              style={{ \n                color: 'white',\n                backgroundColor: 'rgba(255, 255, 255, 0.1)',\n              }}\n            >\n              <option value=\"\" style={{ backgroundColor: '#1f2937', color: 'white' }}>All Types</option>\n              <option value={TransactionType.Income} style={{ backgroundColor: '#1f2937', color: 'white' }}>Income</option>\n              <option value={TransactionType.Expense} style={{ backgroundColor: '#1f2937', color: 'white' }}>Expense</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"form-label\">Category</label>\n            <select\n              name=\"category\"\n              value={draftFilters.category}\n              onChange={handleFilterChange}\n              className=\"form-control\"\n              style={{ \n                color: 'white',\n                backgroundColor: 'rgba(255, 255, 255, 0.1)',\n              }}\n            >\n              <option value=\"\" style={{ backgroundColor: '#1f2937', color: 'white' }}>All Categories</option>\n              {filteredCategories.map((category) => (\n                <option key={category.id} value={category.name} style={{ backgroundColor: '#1f2937', color: 'white' }}>\n                  {category.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"form-label\">From Date</label>\n            <input\n              type=\"date\"\n              name=\"fromDate\"\n              value={draftFilters.fromDate}\n              onChange={handleFilterChange}\n              className=\"form-control\"\n            />\n          </div>\n\n          <div>\n            <label className=\"form-label\">To Date</label>\n            <input\n              type=\"date\"\n              name=\"toDate\"\n              value={draftFilters.toDate}\n              onChange={handleFilterChange}\n              className=\"form-control\"\n            />\n          </div>\n\n          <div style={{ display: 'flex', gap: '0.5rem' }}>\n            <button\n              onClick={applyFilters}\n              className={`btn ${hasFilterChanges ? 'btn-primary' : 'btn-secondary'}`}\n              style={{ flex: 1 }}\n              disabled={!hasFilterChanges}\n            >\n              Apply Filters\n            </button>\n            <button\n              onClick={clearFilters}\n              className=\"btn btn-secondary\"\n              style={{ flex: 1 }}\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Transactions Table */}\n      <div className=\"glass-card\">\n        {error && (\n          <div style={{ \n            background: 'rgba(248, 113, 113, 0.1)', \n            border: '1px solid #f87171', \n            color: '#f87171',\n            padding: '1rem',\n            borderRadius: '8px',\n            marginBottom: '1rem'\n          }}>\n            {error}\n          </div>\n        )}\n\n        {loading ? (\n          <div className=\"loading\">Loading transactions...</div>\n        ) : transactions.length > 0 ? (\n          <div className=\"table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Description</th>\n                  <th>Category</th>\n                  <th>Type</th>\n                  <th>Amount</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {transactions.map((transaction) => {\n                  const isTransfer = transaction.category === 'Transfer';\n                  return (\n                  <tr key={transaction.id}>\n                    <td>{formatDate(transaction.date)}</td>\n                    <td>{transaction.description}</td>\n                    <td>\n                      {isTransfer && (\n                        <span style={{ marginRight: '0.5rem' }}>↔️</span>\n                      )}\n                      {transaction.category}\n                    </td>\n                    <td>\n                      <span\n                        style={{\n                          color: isTransfer ? '#8b5cf6' :\n                                 transaction.type === TransactionType.Income ? '#4ade80' : '#fbbf24',\n                          fontWeight: 'bold',\n                        }}\n                      >\n                        {isTransfer ? 'Transfer' :\n                         transaction.type === TransactionType.Income ? 'Income' : 'Expense'}\n                      </span>\n                    </td>\n                    <td\n                      style={{\n                        color: isTransfer ? '#8b5cf6' : \n                               transaction.type === TransactionType.Income ? '#4ade80' : '#fbbf24',\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {isTransfer ? '↔️' : \n                       transaction.type === TransactionType.Income ? '+' : '-'}\n                      {formatCurrency(Math.abs(transaction.amount))}\n                    </td>\n                    <td>\n                      <button\n                        onClick={() => handleDelete(transaction.id)}\n                        className=\"btn btn-danger\"\n                        style={{ padding: '0.25rem 0.5rem', fontSize: '0.8rem' }}\n                      >\n                        Delete\n                      </button>\n                    </td>\n                  </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <div style={{ textAlign: 'center', color: 'rgba(255, 255, 255, 0.7)', padding: '2rem' }}>\n            No transactions found. Try adjusting your filters or add some transactions!\n          </div>\n        )}\n\n        {/* Pagination */}\n        {transactions.length > 0 && (\n          <div style={{ \n            display: 'flex', \n            justifyContent: 'center', \n            gap: '1rem', \n            marginTop: '2rem' \n          }}>\n            <button\n              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n              disabled={currentPage === 1}\n              className=\"btn btn-secondary\"\n            >\n              Previous\n            </button>\n            <span style={{ \n              color: 'white', \n              alignSelf: 'center',\n              padding: '0 1rem'\n            }}>\n              Page {currentPage}\n            </span>\n            <button\n              onClick={() => setCurrentPage(prev => prev + 1)}\n              disabled={transactions.length < pageSize}\n              className=\"btn btn-secondary\"\n            >\n              Next\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default TransactionList;","import axios from 'axios';\n\n// API configuration - use relative path since React and API are served from same server\nconst API_BASE_URL = '/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Types\nexport interface Transaction {\n  id: number;\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  accountId: number;\n  accountName?: string;\n  accountIcon?: string;\n  date: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TransactionCreateDto {\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  accountId: number;\n  date: string;\n}\n\nexport interface TransactionUpdateDto {\n  description?: string;\n  amount?: number;\n  type?: TransactionType;\n  category?: string;\n  accountId?: number;\n  date?: string;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  description?: string;\n  type: TransactionType;\n  isDefault: boolean;\n  createdAt: string;\n  transactionCount?: number;\n  totalAmount?: number;\n}\n\nexport interface CategoryCreateDto {\n  name: string;\n  description?: string;\n  type: TransactionType;\n}\n\nexport interface Account {\n  id: number;\n  name: string;\n  description?: string;\n  type: AccountType;\n  icon: string;\n  balance: number;\n  isDefault: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TransferDto {\n  fromAccountId: number;\n  toAccountId: number;\n  amount: number;\n  description?: string;\n  date: string;\n}\n\nexport interface AccountCreateDto {\n  name: string;\n  description?: string;\n  type: AccountType;\n  icon: string;\n}\n\nexport interface AccountUpdateDto {\n  name?: string;\n  description?: string;\n  type?: AccountType;\n  icon?: string;\n}\n\nexport enum AccountType {\n  Cash = 0,\n  Bank = 1,\n  CreditCard = 2,\n  Investment = 3,\n  Savings = 4,\n  Other = 5,\n}\n\nexport interface Summary {\n  totalIncome: number;\n  totalExpense: number;\n  balance: number;\n  fromDate?: string;\n  toDate?: string;\n}\n\nexport enum TransactionType {\n  Income = 1,\n  Expense = 2,\n}\n\n// API functions\nexport const transactionApi = {\n  // Get all transactions with optional filters\n  getAll: (params?: {\n    type?: TransactionType;\n    category?: string;\n    fromDate?: string;\n    toDate?: string;\n    page?: number;\n    pageSize?: number;\n  }) => api.get<Transaction[]>('/transactions', { params }),\n\n  // Get transaction by ID\n  getById: (id: number) => api.get<Transaction>(`/transactions/${id}`),\n\n  // Create new transaction\n  create: (transaction: TransactionCreateDto) => \n    api.post<Transaction>('/transactions', transaction),\n\n  // Update transaction\n  update: (id: number, transaction: TransactionUpdateDto) => \n    api.put<Transaction>(`/transactions/${id}`, transaction),\n\n  // Delete transaction\n  delete: (id: number) => api.delete(`/transactions/${id}`),\n\n  // Get summary\n  getSummary: (fromDate?: string, toDate?: string) => \n    api.get<Summary>('/transactions/summary', { \n      params: { fromDate, toDate } \n    }),\n\n  // Delete all transactions\n  deleteAll: () => api.delete('/transactions/all'),\n};\n\nexport const categoryApi = {\n  // Get all categories with optional type filter\n  getAll: (type?: TransactionType) => \n    api.get<Category[]>('/categories', { params: { type } }),\n\n  // Get category by ID\n  getById: (id: number) => api.get<Category>(`/categories/${id}`),\n\n  // Create new category\n  create: (category: CategoryCreateDto) => \n    api.post<Category>('/categories', category),\n\n  // Update category\n  update: (id: number, category: Partial<CategoryCreateDto>) => \n    api.put<Category>(`/categories/${id}`, category),\n\n  // Delete category\n  delete: (id: number) => api.delete(`/categories/${id}`),\n};\n\nexport const accountApi = {\n  // Get all accounts\n  getAll: () => api.get<Account[]>('/accounts'),\n\n  // Get account by ID\n  getById: (id: number) => api.get<Account>(`/accounts/${id}`),\n\n  // Create new account\n  create: (account: AccountCreateDto) => \n    api.post<Account>('/accounts', account),\n\n  // Update account\n  update: (id: number, account: AccountUpdateDto) => \n    api.put<Account>(`/accounts/${id}`, account),\n\n  // Delete account\n  delete: (id: number) => api.delete(`/accounts/${id}`),\n\n  // Adjust account balance\n  adjustBalance: (id: number, amount: number) => \n    api.post(`/accounts/${id}/adjust-balance`, { amount }),\n    \n  // Transfer money between accounts\n  transfer: (data: TransferDto) => api.post('/accounts/transfer', data),\n};\n\nexport default api;"],"names":["memo","_ref","onNavigate","onBack","transactions","setTransactions","useState","categories","setCategories","loading","setLoading","error","setError","appliedFilters","setAppliedFilters","type","category","fromDate","toDate","draftFilters","setDraftFilters","currentPage","setCurrentPage","pageSize","loadTransactionsCallback","useCallback","async","params","_objectSpread","page","parseInt","response","transactionApi","getAll","data","err","console","loadCategoriesCallback","categoryApi","useEffect","filteredCategories","useMemo","filter","cat","handleFilterChange","e","name","value","target","prev","applyFilters","clearFilters","emptyFilters","hasFilterChanges","JSON","stringify","formatDate","dateString","date","Date","isNaN","getTime","toLocaleDateString","year","month","day","_unused","_jsxs","children","_jsx","style","color","marginBottom","textAlign","className","display","gridTemplateColumns","gap","alignItems","onChange","backgroundColor","TransactionType","Income","Expense","map","id","onClick","concat","flex","disabled","background","border","padding","borderRadius","length","transaction","isTransfer","description","marginRight","fontWeight","amount","Math","abs","toLocaleString","minimumFractionDigits","maximumFractionDigits","window","confirm","delete","t","handleDelete","fontSize","justifyContent","marginTop","max","alignSelf","api","axios","create","baseURL","headers","get","getById","post","update","put","getSummary","deleteAll","accountApi","account","adjustBalance","transfer"],"sourceRoot":""}