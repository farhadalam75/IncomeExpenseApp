{"version":3,"file":"static/js/478.784443a7.chunk.js","mappings":"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","sources":["services/api.ts","components/TransferForm.tsx"],"sourcesContent":["import axios from 'axios';\n\n// API configuration - use relative path since React and API are served from same server\nconst API_BASE_URL = '/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Types\nexport interface Transaction {\n  id: number;\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  accountId: number;\n  accountName?: string;\n  accountIcon?: string;\n  date: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TransactionCreateDto {\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  accountId: number;\n  date: string;\n}\n\nexport interface TransactionUpdateDto {\n  description?: string;\n  amount?: number;\n  type?: TransactionType;\n  category?: string;\n  accountId?: number;\n  date?: string;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  description?: string;\n  type: TransactionType;\n  isDefault: boolean;\n  createdAt: string;\n  transactionCount?: number;\n  totalAmount?: number;\n}\n\nexport interface CategoryCreateDto {\n  name: string;\n  description?: string;\n  type: TransactionType;\n}\n\nexport interface Account {\n  id: number;\n  name: string;\n  description?: string;\n  type: AccountType;\n  icon: string;\n  balance: number;\n  isDefault: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TransferDto {\n  fromAccountId: number;\n  toAccountId: number;\n  amount: number;\n  description?: string;\n  date: string;\n}\n\nexport interface AccountCreateDto {\n  name: string;\n  description?: string;\n  type: AccountType;\n  icon: string;\n}\n\nexport interface AccountUpdateDto {\n  name?: string;\n  description?: string;\n  type?: AccountType;\n  icon?: string;\n}\n\nexport enum AccountType {\n  Cash = 0,\n  Bank = 1,\n  CreditCard = 2,\n  Investment = 3,\n  Savings = 4,\n  Other = 5,\n}\n\nexport interface Summary {\n  totalIncome: number;\n  totalExpense: number;\n  balance: number;\n  fromDate?: string;\n  toDate?: string;\n}\n\nexport enum TransactionType {\n  Income = 1,\n  Expense = 2,\n}\n\n// API functions\nexport const transactionApi = {\n  // Get all transactions with optional filters\n  getAll: (params?: {\n    type?: TransactionType;\n    category?: string;\n    fromDate?: string;\n    toDate?: string;\n    page?: number;\n    pageSize?: number;\n  }) => api.get<Transaction[]>('/transactions', { params }),\n\n  // Get transaction by ID\n  getById: (id: number) => api.get<Transaction>(`/transactions/${id}`),\n\n  // Create new transaction\n  create: (transaction: TransactionCreateDto) => \n    api.post<Transaction>('/transactions', transaction),\n\n  // Update transaction\n  update: (id: number, transaction: TransactionUpdateDto) => \n    api.put<Transaction>(`/transactions/${id}`, transaction),\n\n  // Delete transaction\n  delete: (id: number) => api.delete(`/transactions/${id}`),\n\n  // Get summary\n  getSummary: (fromDate?: string, toDate?: string) => \n    api.get<Summary>('/transactions/summary', { \n      params: { fromDate, toDate } \n    }),\n\n  // Delete all transactions\n  deleteAll: () => api.delete('/transactions/all'),\n};\n\nexport const categoryApi = {\n  // Get all categories with optional type filter\n  getAll: (type?: TransactionType) => \n    api.get<Category[]>('/categories', { params: { type } }),\n\n  // Get category by ID\n  getById: (id: number) => api.get<Category>(`/categories/${id}`),\n\n  // Create new category\n  create: (category: CategoryCreateDto) => \n    api.post<Category>('/categories', category),\n\n  // Update category\n  update: (id: number, category: Partial<CategoryCreateDto>) => \n    api.put<Category>(`/categories/${id}`, category),\n\n  // Delete category\n  delete: (id: number) => api.delete(`/categories/${id}`),\n};\n\nexport const accountApi = {\n  // Get all accounts\n  getAll: () => api.get<Account[]>('/accounts'),\n\n  // Get account by ID\n  getById: (id: number) => api.get<Account>(`/accounts/${id}`),\n\n  // Create new account\n  create: (account: AccountCreateDto) => \n    api.post<Account>('/accounts', account),\n\n  // Update account\n  update: (id: number, account: AccountUpdateDto) => \n    api.put<Account>(`/accounts/${id}`, account),\n\n  // Delete account\n  delete: (id: number) => api.delete(`/accounts/${id}`),\n\n  // Adjust account balance\n  adjustBalance: (id: number, amount: number) => \n    api.post(`/accounts/${id}/adjust-balance`, { amount }),\n    \n  // Transfer money between accounts\n  transfer: (data: TransferDto) => api.post('/accounts/transfer', data),\n};\n\nexport default api;","import React, { useState, useEffect } from 'react';\nimport { accountApi, Account } from '../services/api';\n\ninterface TransferFormProps {\n  onSuccess?: () => void;\n  onBack?: () => void;\n}\n\nconst TransferForm: React.FC<TransferFormProps> = ({ onSuccess, onBack }) => {\n  const [formData, setFormData] = useState({\n    fromAccountId: 0,\n    toAccountId: 0,\n    amount: 0,\n    description: '',\n    date: new Date().toISOString().split('T')[0],\n  });\n\n  const [accounts, setAccounts] = useState<Account[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n\n  useEffect(() => {\n    loadAccounts();\n  }, []);\n\n  const loadAccounts = async () => {\n    try {\n      const response = await accountApi.getAll();\n      setAccounts(response.data);\n      // Auto-select first two different accounts\n      if (response.data.length >= 2) {\n        setFormData(prev => ({\n          ...prev,\n          fromAccountId: response.data[0].id,\n          toAccountId: response.data[1].id\n        }));\n      }\n    } catch (err) {\n      console.error('Failed to load accounts:', err);\n      setError('Failed to load accounts');\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: name === 'amount' ? parseFloat(value) || 0 : \n              name === 'fromAccountId' || name === 'toAccountId' ? parseInt(value) : value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.amount <= 0 || !formData.fromAccountId || !formData.toAccountId) {\n      setError('Please fill in all required fields');\n      return;\n    }\n\n    if (formData.fromAccountId === formData.toAccountId) {\n      setError('Source and destination accounts must be different');\n      return;\n    }\n\n    const fromAccount = accounts.find(acc => acc.id === formData.fromAccountId);\n    if (fromAccount && fromAccount.balance < formData.amount) {\n      setError('Insufficient balance in source account');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Use the transfer API endpoint\n      await accountApi.transfer(formData);\n      \n      setSuccess(true);\n      setFormData({\n        fromAccountId: accounts.length >= 2 ? accounts[0].id : 0,\n        toAccountId: accounts.length >= 2 ? accounts[1].id : 0,\n        amount: 0,\n        description: '',\n        date: new Date().toISOString().split('T')[0],\n      });\n\n      // Reload accounts to update balances\n      loadAccounts();\n\n      setTimeout(() => {\n        setSuccess(false);\n        if (onSuccess) {\n          onSuccess();\n        }\n      }, 2000);\n\n    } catch (err) {\n      setError('Failed to transfer money');\n      console.error('Transfer error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getAvailableToAccounts = () => {\n    return accounts.filter(acc => acc.id !== formData.fromAccountId);\n  };\n\n  const getAvailableFromAccounts = () => {\n    return accounts.filter(acc => acc.id !== formData.toAccountId);\n  };\n\n  return (\n    <div className=\"form-container\">\n      <div className=\"glass-card\" style={{ maxWidth: '600px', margin: '0 auto', padding: '1.5rem' }}>\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center', \n          marginBottom: '1.5rem',\n          flexWrap: 'wrap',\n          gap: '1rem'\n        }}>\n          <h2 style={{ \n            color: 'white', \n            margin: 0, \n            fontSize: 'clamp(1.25rem, 3vw, 1.75rem)'\n          }}>\n            🔄 Transfer Money\n          </h2>\n          {onBack && (\n            <button\n              onClick={onBack}\n              className=\"btn btn-secondary\"\n              style={{ fontSize: '0.875rem', padding: '0.5rem 1rem' }}\n            >\n              ← Back\n            </button>\n          )}\n        </div>\n\n        {error && (\n          <div style={{ \n            background: 'rgba(248, 113, 113, 0.1)', \n            border: '1px solid #f87171', \n            color: '#f87171',\n            padding: '1rem',\n            borderRadius: '8px',\n            marginBottom: '1rem'\n          }}>\n            {error}\n          </div>\n        )}\n\n        {success && (\n          <div style={{ \n            background: 'rgba(74, 222, 128, 0.1)', \n            border: '1px solid #4ade80', \n            color: '#4ade80',\n            padding: '1rem',\n            borderRadius: '8px',\n            marginBottom: '1rem'\n          }}>\n            Money transferred successfully!\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit}>\n          {/* First Row: From Account */}\n          <div className=\"form-group\" style={{ marginBottom: '0.75rem' }}>\n            <label className=\"form-label\" style={{ fontSize: '0.875rem', marginBottom: '0.25rem' }}>From Account *</label>\n            <select\n              name=\"fromAccountId\"\n              value={formData.fromAccountId}\n              onChange={handleInputChange}\n              className=\"form-control\"\n              style={{ \n                color: 'white',\n                backgroundColor: 'rgba(30, 41, 59, 0.8)',\n                border: '1px solid rgba(255, 255, 255, 0.2)',\n                padding: '0.5rem',\n                fontSize: '0.875rem'\n              }}\n              required\n            >\n              <option value={0} style={{ backgroundColor: '#1e293b', color: 'white' }}>\n                Select source account\n              </option>\n              {getAvailableFromAccounts().map((account) => (\n                <option key={account.id} value={account.id} style={{ backgroundColor: '#1e293b', color: 'white' }}>\n                  {account.icon} {account.name} (৳{account.balance.toFixed(2)})\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Second Row: To Account */}\n          <div className=\"form-group\" style={{ marginBottom: '0.75rem' }}>\n            <label className=\"form-label\" style={{ fontSize: '0.875rem', marginBottom: '0.25rem' }}>To Account *</label>\n            <select\n              name=\"toAccountId\"\n              value={formData.toAccountId}\n              onChange={handleInputChange}\n              className=\"form-control\"\n              style={{ \n                color: 'white',\n                backgroundColor: 'rgba(30, 41, 59, 0.8)',\n                border: '1px solid rgba(255, 255, 255, 0.2)',\n                padding: '0.5rem',\n                fontSize: '0.875rem'\n              }}\n              required\n            >\n              <option value={0} style={{ backgroundColor: '#1e293b', color: 'white' }}>\n                Select destination account\n              </option>\n              {getAvailableToAccounts().map((account) => (\n                <option key={account.id} value={account.id} style={{ backgroundColor: '#1e293b', color: 'white' }}>\n                  {account.icon} {account.name} (৳{account.balance.toFixed(2)})\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Third Row: Amount and Date */}\n          <div style={{ \n            display: 'grid', \n            gridTemplateColumns: '1fr 1fr', \n            gap: '0.75rem',\n            marginBottom: '0.75rem'\n          }}>\n            <div className=\"form-group\" style={{ marginBottom: '0' }}>\n              <label className=\"form-label\" style={{ fontSize: '0.875rem', marginBottom: '0.25rem' }}>Amount *</label>\n              <input\n                type=\"number\"\n                name=\"amount\"\n                value={formData.amount || ''}\n                onChange={handleInputChange}\n                className=\"form-control\"\n                style={{ padding: '0.5rem', fontSize: '0.875rem' }}\n                placeholder=\"0.00\"\n                min=\"0.01\"\n                step=\"0.01\"\n                required\n              />\n            </div>\n\n            <div className=\"form-group\" style={{ marginBottom: '0' }}>\n              <label className=\"form-label\" style={{ fontSize: '0.875rem', marginBottom: '0.25rem' }}>Date *</label>\n              <input\n                type=\"date\"\n                name=\"date\"\n                value={formData.date}\n                onChange={handleInputChange}\n                className=\"form-control\"\n                style={{ padding: '0.5rem', fontSize: '0.875rem' }}\n                required\n              />\n            </div>\n          </div>\n\n          {/* Fourth Row: Description */}\n          <div className=\"form-group\" style={{ marginBottom: '1rem' }}>\n            <label className=\"form-label\" style={{ fontSize: '0.875rem', marginBottom: '0.25rem' }}>Description</label>\n            <textarea\n              name=\"description\"\n              value={formData.description}\n              onChange={handleInputChange}\n              className=\"form-control\"\n              style={{ padding: '0.5rem', fontSize: '0.875rem', minHeight: '60px' }}\n              placeholder=\"Enter transfer description (optional)\"\n              rows={2}\n            />\n          </div>\n\n          {/* Transfer Preview */}\n          {formData.fromAccountId && formData.toAccountId && formData.amount > 0 && (\n            <div style={{ \n              background: 'rgba(59, 130, 246, 0.1)', \n              border: '1px solid rgba(59, 130, 246, 0.3)', \n              color: 'rgba(255, 255, 255, 0.9)',\n              padding: '1rem',\n              borderRadius: '8px',\n              marginBottom: '1rem',\n              fontSize: '0.875rem'\n            }}>\n              <div style={{ marginBottom: '0.5rem' }}>\n                <strong>Transfer Preview:</strong>\n              </div>\n              <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '0.25rem' }}>\n                <span>From: {accounts.find(acc => acc.id === formData.fromAccountId)?.name}</span>\n                <span style={{ color: '#ef4444' }}>-৳{formData.amount.toFixed(2)}</span>\n              </div>\n              <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <span>To: {accounts.find(acc => acc.id === formData.toAccountId)?.name}</span>\n                <span style={{ color: '#4ade80' }}>+৳{formData.amount.toFixed(2)}</span>\n              </div>\n            </div>\n          )}\n\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            disabled={loading}\n            style={{ \n              width: '100%',\n              padding: '0.75rem 1rem',\n              fontSize: '0.875rem',\n              fontWeight: '600'\n            }}\n          >\n            {loading ? 'Transferring...' : '🔄 Transfer Money'}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TransferForm;"],"names":["api","axios","create","baseURL","headers","TransactionType","transactionApi","getAll","params","get","getById","id","concat","transaction","post","update","put","delete","getSummary","fromDate","toDate","deleteAll","categoryApi","type","category","accountApi","account","adjustBalance","amount","transfer","data","_ref","_accounts$find","_accounts$find2","onSuccess","onBack","formData","setFormData","useState","fromAccountId","toAccountId","description","date","Date","toISOString","split","accounts","setAccounts","loading","setLoading","error","setError","success","setSuccess","useEffect","loadAccounts","async","response","length","prev","_objectSpread","err","console","handleInputChange","e","name","value","target","parseFloat","parseInt","_jsx","className","children","_jsxs","style","maxWidth","margin","padding","display","justifyContent","alignItems","marginBottom","flexWrap","gap","color","fontSize","onClick","background","border","borderRadius","onSubmit","preventDefault","fromAccount","find","acc","balance","setTimeout","onChange","backgroundColor","required","filter","map","icon","toFixed","gridTemplateColumns","placeholder","min","step","minHeight","rows","disabled","width","fontWeight"],"sourceRoot":""}