{"version":3,"file":"static/js/824.df427ce1.chunk.js","mappings":"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","sources":["services/api.ts","components/CategoryManager.tsx"],"sourcesContent":["import axios from 'axios';\n\n// API configuration - use relative path since React and API are served from same server\nconst API_BASE_URL = '/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Types\nexport interface Transaction {\n  id: number;\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  date: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TransactionCreateDto {\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  date: string;\n  notes?: string;\n}\n\nexport interface TransactionUpdateDto {\n  description?: string;\n  amount?: number;\n  type?: TransactionType;\n  category?: string;\n  date?: string;\n  notes?: string;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  description?: string;\n  type: TransactionType;\n  isDefault: boolean;\n  createdAt: string;\n}\n\nexport interface CategoryCreateDto {\n  name: string;\n  description?: string;\n  type: TransactionType;\n}\n\nexport interface Summary {\n  totalIncome: number;\n  totalExpense: number;\n  balance: number;\n  fromDate?: string;\n  toDate?: string;\n}\n\nexport enum TransactionType {\n  Income = 1,\n  Expense = 2,\n}\n\n// API functions\nexport const transactionApi = {\n  // Get all transactions with optional filters\n  getAll: (params?: {\n    type?: TransactionType;\n    category?: string;\n    fromDate?: string;\n    toDate?: string;\n    page?: number;\n    pageSize?: number;\n  }) => api.get<Transaction[]>('/transactions', { params }),\n\n  // Get transaction by ID\n  getById: (id: number) => api.get<Transaction>(`/transactions/${id}`),\n\n  // Create new transaction\n  create: (transaction: TransactionCreateDto) => \n    api.post<Transaction>('/transactions', transaction),\n\n  // Update transaction\n  update: (id: number, transaction: TransactionUpdateDto) => \n    api.put<Transaction>(`/transactions/${id}`, transaction),\n\n  // Delete transaction\n  delete: (id: number) => api.delete(`/transactions/${id}`),\n\n  // Get summary\n  getSummary: (fromDate?: string, toDate?: string) => \n    api.get<Summary>('/transactions/summary', { \n      params: { fromDate, toDate } \n    }),\n};\n\nexport const categoryApi = {\n  // Get all categories with optional type filter\n  getAll: (type?: TransactionType) => \n    api.get<Category[]>('/categories', { params: { type } }),\n\n  // Get category by ID\n  getById: (id: number) => api.get<Category>(`/categories/${id}`),\n\n  // Create new category\n  create: (category: CategoryCreateDto) => \n    api.post<Category>('/categories', category),\n\n  // Update category\n  update: (id: number, category: Partial<CategoryCreateDto>) => \n    api.put<Category>(`/categories/${id}`, category),\n\n  // Delete category\n  delete: (id: number) => api.delete(`/categories/${id}`),\n};\n\nexport default api;","import React, { useState, useEffect, memo } from 'react';\nimport { categoryApi, Category, CategoryCreateDto, TransactionType } from '../services/api';\n\ninterface CategoryManagerProps {\n  onBack?: () => void;\n}\n\nconst CategoryManager: React.FC<CategoryManagerProps> = memo(({ onBack }) => {\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showForm, setShowForm] = useState(false);\n  \n  const [formData, setFormData] = useState<CategoryCreateDto>({\n    name: '',\n    description: '',\n    type: TransactionType.Expense,\n  });\n\n  useEffect(() => {\n    loadCategories();\n  }, []);\n\n  const loadCategories = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await categoryApi.getAll();\n      setCategories(response.data);\n    } catch (err) {\n      setError('Failed to load categories');\n      console.error('Category loading error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: name === 'type' ? parseInt(value) as TransactionType : value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      setError('Category name is required');\n      return;\n    }\n\n    try {\n      setError(null);\n      await categoryApi.create(formData);\n      \n      // Reset form\n      setFormData({\n        name: '',\n        description: '',\n        type: TransactionType.Expense,\n      });\n      setShowForm(false);\n      \n      // Reload categories\n      loadCategories();\n    } catch (err: any) {\n      if (err.response?.status === 400) {\n        setError('Category name already exists for this type');\n      } else {\n        setError('Failed to create category');\n      }\n      console.error('Category creation error:', err);\n    }\n  };\n\n  const handleDelete = async (id: number, isDefault: boolean) => {\n    if (isDefault) {\n      setError('Cannot delete default categories');\n      return;\n    }\n\n    if (!window.confirm('Are you sure you want to delete this category?')) {\n      return;\n    }\n\n    try {\n      setError(null);\n      await categoryApi.delete(id);\n      setCategories(categories.filter(c => c.id !== id));\n    } catch (err) {\n      setError('Failed to delete category');\n      console.error('Category deletion error:', err);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const incomeCategories = categories.filter(c => c.type === TransactionType.Income);\n  const expenseCategories = categories.filter(c => c.type === TransactionType.Expense);\n\n  return (\n    <div>\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'space-between', \n        alignItems: 'center', \n        marginBottom: '2rem' \n      }}>\n        <h1 style={{ color: 'white', margin: 0 }}>\n          Category Management\n        </h1>\n        <button\n          onClick={() => setShowForm(!showForm)}\n          className=\"btn btn-primary\"\n        >\n          {showForm ? 'Cancel' : 'Add New Category'}\n        </button>\n      </div>\n\n      {error && (\n        <div style={{ \n          background: 'rgba(248, 113, 113, 0.1)', \n          border: '1px solid #f87171', \n          color: '#f87171',\n          padding: '1rem',\n          borderRadius: '8px',\n          marginBottom: '1rem'\n        }}>\n          {error}\n          <button \n            onClick={() => setError(null)}\n            style={{ \n              float: 'right', \n              background: 'none', \n              border: 'none', \n              color: '#f87171', \n              cursor: 'pointer' \n            }}\n          >\n            ×\n          </button>\n        </div>\n      )}\n\n      {/* Add Category Form */}\n      {showForm && (\n        <div className=\"glass-card\" style={{ marginBottom: '2rem' }}>\n          <h3 style={{ color: 'white', marginBottom: '1rem' }}>Add New Category</h3>\n          \n          <form onSubmit={handleSubmit}>\n            <div style={{ \n              display: 'grid', \n              gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', \n              gap: '1rem',\n              marginBottom: '1rem'\n            }}>\n              <div>\n                <label className=\"form-label\">Type *</label>\n                <select\n                  name=\"type\"\n                  value={formData.type}\n                  onChange={handleInputChange}\n                  className=\"form-control\"\n                  required\n                >\n                  <option value={TransactionType.Expense}>Expense</option>\n                  <option value={TransactionType.Income}>Income</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"form-label\">Name *</label>\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleInputChange}\n                  className=\"form-control\"\n                  placeholder=\"Enter category name\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">Description</label>\n              <textarea\n                name=\"description\"\n                value={formData.description}\n                onChange={handleInputChange}\n                className=\"form-control\"\n                placeholder=\"Optional description\"\n                rows={2}\n              />\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Create Category\n            </button>\n          </form>\n        </div>\n      )}\n\n      {loading ? (\n        <div className=\"glass-card\">\n          <div className=\"loading\">Loading categories...</div>\n        </div>\n      ) : (\n        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '2rem' }}>\n          {/* Income Categories */}\n          <div className=\"glass-card\">\n            <h3 style={{ color: '#4ade80', marginBottom: '1.5rem', textAlign: 'center' }}>\n              Income Categories ({incomeCategories.length})\n            </h3>\n            \n            {incomeCategories.length > 0 ? (\n              <div className=\"table-container\">\n                <table className=\"table\">\n                  <thead>\n                    <tr>\n                      <th>Name</th>\n                      <th>Default</th>\n                      <th>Created</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {incomeCategories.map((category) => (\n                      <tr key={category.id}>\n                        <td>\n                          <div>\n                            <div style={{ fontWeight: 'bold' }}>{category.name}</div>\n                            {category.description && (\n                              <div style={{ \n                                fontSize: '0.8rem', \n                                color: 'rgba(255, 255, 255, 0.7)',\n                                marginTop: '0.25rem'\n                              }}>\n                                {category.description}\n                              </div>\n                            )}\n                          </div>\n                        </td>\n                        <td>\n                          {category.isDefault ? (\n                            <span style={{ color: '#4ade80' }}>Yes</span>\n                          ) : (\n                            <span style={{ color: 'rgba(255, 255, 255, 0.7)' }}>No</span>\n                          )}\n                        </td>\n                        <td>{formatDate(category.createdAt)}</td>\n                        <td>\n                          {!category.isDefault && (\n                            <button\n                              onClick={() => handleDelete(category.id, category.isDefault)}\n                              className=\"btn btn-danger\"\n                              style={{ padding: '0.25rem 0.5rem', fontSize: '0.8rem' }}\n                            >\n                              Delete\n                            </button>\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div style={{ \n                textAlign: 'center', \n                color: 'rgba(255, 255, 255, 0.7)', \n                padding: '2rem' \n              }}>\n                No income categories found\n              </div>\n            )}\n          </div>\n\n          {/* Expense Categories */}\n          <div className=\"glass-card\">\n            <h3 style={{ color: '#f87171', marginBottom: '1.5rem', textAlign: 'center' }}>\n              Expense Categories ({expenseCategories.length})\n            </h3>\n            \n            {expenseCategories.length > 0 ? (\n              <div className=\"table-container\">\n                <table className=\"table\">\n                  <thead>\n                    <tr>\n                      <th>Name</th>\n                      <th>Default</th>\n                      <th>Created</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {expenseCategories.map((category) => (\n                      <tr key={category.id}>\n                        <td>\n                          <div>\n                            <div style={{ fontWeight: 'bold' }}>{category.name}</div>\n                            {category.description && (\n                              <div style={{ \n                                fontSize: '0.8rem', \n                                color: 'rgba(255, 255, 255, 0.7)',\n                                marginTop: '0.25rem'\n                              }}>\n                                {category.description}\n                              </div>\n                            )}\n                          </div>\n                        </td>\n                        <td>\n                          {category.isDefault ? (\n                            <span style={{ color: '#4ade80' }}>Yes</span>\n                          ) : (\n                            <span style={{ color: 'rgba(255, 255, 255, 0.7)' }}>No</span>\n                          )}\n                        </td>\n                        <td>{formatDate(category.createdAt)}</td>\n                        <td>\n                          {!category.isDefault && (\n                            <button\n                              onClick={() => handleDelete(category.id, category.isDefault)}\n                              className=\"btn btn-danger\"\n                              style={{ padding: '0.25rem 0.5rem', fontSize: '0.8rem' }}\n                            >\n                              Delete\n                            </button>\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div style={{ \n                textAlign: 'center', \n                color: 'rgba(255, 255, 255, 0.7)', \n                padding: '2rem' \n              }}>\n                No expense categories found\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport default CategoryManager;"],"names":["api","axios","create","baseURL","headers","TransactionType","transactionApi","getAll","params","get","getById","id","concat","transaction","post","update","put","delete","getSummary","fromDate","toDate","categoryApi","type","category","memo","_ref","onBack","categories","setCategories","useState","loading","setLoading","error","setError","showForm","setShowForm","formData","setFormData","name","description","Expense","useEffect","loadCategories","async","response","data","err","console","handleInputChange","e","value","target","prev","_objectSpread","parseInt","handleDelete","isDefault","window","confirm","filter","c","formatDate","dateString","Date","toLocaleDateString","year","month","day","incomeCategories","Income","expenseCategories","_jsxs","children","style","display","justifyContent","alignItems","marginBottom","_jsx","color","margin","onClick","className","background","border","padding","borderRadius","float","cursor","onSubmit","preventDefault","trim","_err$response","status","gridTemplateColumns","gap","onChange","required","placeholder","rows","textAlign","length","map","fontWeight","fontSize","marginTop","createdAt"],"sourceRoot":""}