{"version":3,"file":"static/js/75.8b7b37e3.chunk.js","mappings":"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","sources":["components/TransactionForm.tsx","services/api.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { transactionApi, categoryApi, TransactionCreateDto, Category, TransactionType } from '../services/api';\n\ninterface TransactionFormProps {\n  onSuccess?: () => void;\n  onBack?: () => void;\n}\n\nconst TransactionForm: React.FC<TransactionFormProps> = ({ onSuccess, onBack }) => {\n  const [formData, setFormData] = useState<TransactionCreateDto>({\n    description: '',\n    amount: 0,\n    type: TransactionType.Expense,\n    category: '',\n    date: new Date().toISOString().split('T')[0],\n    notes: '',\n  });\n\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n\n  useEffect(() => {\n    loadCategories();\n  }, [formData.type]);\n\n  const loadCategories = async () => {\n    try {\n      const response = await categoryApi.getAll(formData.type);\n      setCategories(response.data);\n      // Auto-select first category if none selected\n      if (response.data.length > 0 && !formData.category) {\n        setFormData(prev => ({ ...prev, category: response.data[0].name }));\n      }\n    } catch (err) {\n      console.error('Failed to load categories:', err);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: name === 'amount' ? parseFloat(value) || 0 : \n              name === 'type' ? parseInt(value) as TransactionType : value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.description.trim() || formData.amount <= 0 || !formData.category) {\n      setError('Please fill in all required fields');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      await transactionApi.create(formData);\n      \n      setSuccess(true);\n      setFormData({\n        description: '',\n        amount: 0,\n        type: TransactionType.Expense,\n        category: categories.length > 0 ? categories[0].name : '',\n        date: new Date().toISOString().split('T')[0],\n        notes: '',\n      });\n\n      setTimeout(() => {\n        setSuccess(false);\n        if (onSuccess) {\n          onSuccess();\n        }\n      }, 2000);\n\n    } catch (err) {\n      setError('Failed to create transaction');\n      console.error('Transaction creation error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"form-container\">\n      <div className=\"glass-card\">\n        <h1 style={{ color: 'white', marginBottom: '2rem', textAlign: 'center' }}>\n          Add New Transaction\n        </h1>\n\n        {error && (\n          <div style={{ \n            background: 'rgba(248, 113, 113, 0.1)', \n            border: '1px solid #f87171', \n            color: '#f87171',\n            padding: '1rem',\n            borderRadius: '8px',\n            marginBottom: '1rem'\n          }}>\n            {error}\n          </div>\n        )}\n\n        {success && (\n          <div style={{ \n            background: 'rgba(74, 222, 128, 0.1)', \n            border: '1px solid #4ade80', \n            color: '#4ade80',\n            padding: '1rem',\n            borderRadius: '8px',\n            marginBottom: '1rem'\n          }}>\n            Transaction created successfully!\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label className=\"form-label\">Type *</label>\n            <select\n              name=\"type\"\n              value={formData.type}\n              onChange={handleInputChange}\n              className=\"form-control\"\n              required\n            >\n              <option value={TransactionType.Expense}>Expense</option>\n              <option value={TransactionType.Income}>Income</option>\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Description *</label>\n            <input\n              type=\"text\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleInputChange}\n              className=\"form-control\"\n              placeholder=\"Enter transaction description\"\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Amount *</label>\n            <input\n              type=\"number\"\n              name=\"amount\"\n              value={formData.amount || ''}\n              onChange={handleInputChange}\n              className=\"form-control\"\n              placeholder=\"0.00\"\n              min=\"0.01\"\n              step=\"0.01\"\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Category *</label>\n            <select\n              name=\"category\"\n              value={formData.category}\n              onChange={handleInputChange}\n              className=\"form-control\"\n              required\n            >\n              <option value=\"\">Select a category</option>\n              {categories.map((category) => (\n                <option key={category.id} value={category.name}>\n                  {category.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Date *</label>\n            <input\n              type=\"date\"\n              name=\"date\"\n              value={formData.date}\n              onChange={handleInputChange}\n              className=\"form-control\"\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Notes</label>\n            <textarea\n              name=\"notes\"\n              value={formData.notes}\n              onChange={handleInputChange}\n              className=\"form-control\"\n              placeholder=\"Optional notes about this transaction\"\n              rows={3}\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            disabled={loading}\n            style={{ width: '100%' }}\n          >\n            {loading ? 'Creating...' : 'Create Transaction'}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionForm;","import axios from 'axios';\n\n// API configuration - use relative path since React and API are served from same server\nconst API_BASE_URL = '/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Types\nexport interface Transaction {\n  id: number;\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  date: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TransactionCreateDto {\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  date: string;\n  notes?: string;\n}\n\nexport interface TransactionUpdateDto {\n  description?: string;\n  amount?: number;\n  type?: TransactionType;\n  category?: string;\n  date?: string;\n  notes?: string;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  description?: string;\n  type: TransactionType;\n  isDefault: boolean;\n  createdAt: string;\n}\n\nexport interface CategoryCreateDto {\n  name: string;\n  description?: string;\n  type: TransactionType;\n}\n\nexport interface Summary {\n  totalIncome: number;\n  totalExpense: number;\n  balance: number;\n  fromDate?: string;\n  toDate?: string;\n}\n\nexport enum TransactionType {\n  Income = 1,\n  Expense = 2,\n}\n\n// API functions\nexport const transactionApi = {\n  // Get all transactions with optional filters\n  getAll: (params?: {\n    type?: TransactionType;\n    category?: string;\n    fromDate?: string;\n    toDate?: string;\n    page?: number;\n    pageSize?: number;\n  }) => api.get<Transaction[]>('/transactions', { params }),\n\n  // Get transaction by ID\n  getById: (id: number) => api.get<Transaction>(`/transactions/${id}`),\n\n  // Create new transaction\n  create: (transaction: TransactionCreateDto) => \n    api.post<Transaction>('/transactions', transaction),\n\n  // Update transaction\n  update: (id: number, transaction: TransactionUpdateDto) => \n    api.put<Transaction>(`/transactions/${id}`, transaction),\n\n  // Delete transaction\n  delete: (id: number) => api.delete(`/transactions/${id}`),\n\n  // Get summary\n  getSummary: (fromDate?: string, toDate?: string) => \n    api.get<Summary>('/transactions/summary', { \n      params: { fromDate, toDate } \n    }),\n};\n\nexport const categoryApi = {\n  // Get all categories with optional type filter\n  getAll: (type?: TransactionType) => \n    api.get<Category[]>('/categories', { params: { type } }),\n\n  // Get category by ID\n  getById: (id: number) => api.get<Category>(`/categories/${id}`),\n\n  // Create new category\n  create: (category: CategoryCreateDto) => \n    api.post<Category>('/categories', category),\n\n  // Update category\n  update: (id: number, category: Partial<CategoryCreateDto>) => \n    api.put<Category>(`/categories/${id}`, category),\n\n  // Delete category\n  delete: (id: number) => api.delete(`/categories/${id}`),\n};\n\nexport default api;"],"names":["_ref","onSuccess","onBack","formData","setFormData","useState","description","amount","type","TransactionType","Expense","category","date","Date","toISOString","split","notes","categories","setCategories","loading","setLoading","error","setError","success","setSuccess","useEffect","loadCategories","async","response","categoryApi","getAll","data","length","prev","_objectSpread","name","err","console","handleInputChange","e","value","target","parseFloat","parseInt","_jsx","className","children","_jsxs","style","color","marginBottom","textAlign","background","border","padding","borderRadius","onSubmit","preventDefault","trim","transactionApi","create","setTimeout","onChange","required","Income","placeholder","min","step","map","id","rows","disabled","width","api","axios","baseURL","headers","params","get","getById","concat","transaction","post","update","put","delete","getSummary","fromDate","toDate"],"sourceRoot":""}