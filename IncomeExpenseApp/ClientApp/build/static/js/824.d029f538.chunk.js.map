{"version":3,"file":"static/js/824.d029f538.chunk.js","mappings":"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","sources":["services/api.ts","components/CategoryManager.tsx"],"sourcesContent":["import axios from 'axios';\n\n// API configuration - use relative path since React and API are served from same server\nconst API_BASE_URL = '/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Types\nexport interface Transaction {\n  id: number;\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  accountId: number;\n  accountName?: string;\n  accountIcon?: string;\n  date: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TransactionCreateDto {\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  accountId: number;\n  date: string;\n}\n\nexport interface TransactionUpdateDto {\n  description?: string;\n  amount?: number;\n  type?: TransactionType;\n  category?: string;\n  accountId?: number;\n  date?: string;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  description?: string;\n  type: TransactionType;\n  isDefault: boolean;\n  createdAt: string;\n  transactionCount?: number;\n  totalAmount?: number;\n}\n\nexport interface CategoryCreateDto {\n  name: string;\n  description?: string;\n  type: TransactionType;\n}\n\nexport interface Account {\n  id: number;\n  name: string;\n  description?: string;\n  type: AccountType;\n  icon: string;\n  balance: number;\n  isDefault: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TransferDto {\n  fromAccountId: number;\n  toAccountId: number;\n  amount: number;\n  description?: string;\n  date: string;\n}\n\nexport interface AccountCreateDto {\n  name: string;\n  description?: string;\n  type: AccountType;\n  icon: string;\n}\n\nexport interface AccountUpdateDto {\n  name?: string;\n  description?: string;\n  type?: AccountType;\n  icon?: string;\n}\n\nexport enum AccountType {\n  Cash = 0,\n  Bank = 1,\n  CreditCard = 2,\n  Investment = 3,\n  Savings = 4,\n  Other = 5,\n}\n\nexport interface Summary {\n  totalIncome: number;\n  totalExpense: number;\n  balance: number;\n  fromDate?: string;\n  toDate?: string;\n}\n\nexport enum TransactionType {\n  Income = 1,\n  Expense = 2,\n}\n\n// API functions\nexport const transactionApi = {\n  // Get all transactions with optional filters\n  getAll: (params?: {\n    type?: TransactionType;\n    category?: string;\n    fromDate?: string;\n    toDate?: string;\n    page?: number;\n    pageSize?: number;\n  }) => api.get<Transaction[]>('/transactions', { params }),\n\n  // Get transaction by ID\n  getById: (id: number) => api.get<Transaction>(`/transactions/${id}`),\n\n  // Create new transaction\n  create: (transaction: TransactionCreateDto) => \n    api.post<Transaction>('/transactions', transaction),\n\n  // Update transaction\n  update: (id: number, transaction: TransactionUpdateDto) => \n    api.put<Transaction>(`/transactions/${id}`, transaction),\n\n  // Delete transaction\n  delete: (id: number) => api.delete(`/transactions/${id}`),\n\n  // Get summary\n  getSummary: (fromDate?: string, toDate?: string) => \n    api.get<Summary>('/transactions/summary', { \n      params: { fromDate, toDate } \n    }),\n\n  // Delete all transactions\n  deleteAll: () => api.delete('/transactions/all'),\n};\n\nexport const categoryApi = {\n  // Get all categories with optional type filter\n  getAll: (type?: TransactionType) => \n    api.get<Category[]>('/categories', { params: { type } }),\n\n  // Get category by ID\n  getById: (id: number) => api.get<Category>(`/categories/${id}`),\n\n  // Create new category\n  create: (category: CategoryCreateDto) => \n    api.post<Category>('/categories', category),\n\n  // Update category\n  update: (id: number, category: Partial<CategoryCreateDto>) => \n    api.put<Category>(`/categories/${id}`, category),\n\n  // Delete category\n  delete: (id: number) => api.delete(`/categories/${id}`),\n};\n\nexport const accountApi = {\n  // Get all accounts\n  getAll: () => api.get<Account[]>('/accounts'),\n\n  // Get account by ID\n  getById: (id: number) => api.get<Account>(`/accounts/${id}`),\n\n  // Create new account\n  create: (account: AccountCreateDto) => \n    api.post<Account>('/accounts', account),\n\n  // Update account\n  update: (id: number, account: AccountUpdateDto) => \n    api.put<Account>(`/accounts/${id}`, account),\n\n  // Delete account\n  delete: (id: number) => api.delete(`/accounts/${id}`),\n\n  // Adjust account balance\n  adjustBalance: (id: number, amount: number) => \n    api.post(`/accounts/${id}/adjust-balance`, { amount }),\n    \n  // Transfer money between accounts\n  transfer: (data: TransferDto) => api.post('/accounts/transfer', data),\n};\n\nexport default api;","import React, { useState, useEffect, memo } from 'react';\nimport { categoryApi, Category, CategoryCreateDto, TransactionType } from '../services/api';\n\ninterface CategoryManagerProps {\n  onBack?: () => void;\n}\n\nconst CategoryManager: React.FC<CategoryManagerProps> = memo(({ onBack }) => {\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showForm, setShowForm] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  \n  const [formData, setFormData] = useState<CategoryCreateDto>({\n    name: '',\n    description: '',\n    type: TransactionType.Expense,\n  });\n\n  useEffect(() => {\n    loadCategories();\n  }, []);\n\n  const loadCategories = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await categoryApi.getAll();\n      setCategories(response.data);\n    } catch (err) {\n      setError('Failed to load categories');\n      console.error('Error loading categories:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      setError('Category name is required');\n      return;\n    }\n\n    try {\n      setError(null);\n      \n      if (editingCategory) {\n        // Update existing category\n        await categoryApi.update(editingCategory.id, formData);\n      } else {\n        // Create new category\n        await categoryApi.create(formData);\n      }\n      \n      // Reset form\n      setFormData({\n        name: '',\n        description: '',\n        type: TransactionType.Expense,\n      });\n      setEditingCategory(null);\n      setShowForm(false);\n      \n      // Reload categories\n      loadCategories();\n    } catch (err: any) {\n      if (err.response?.status === 400) {\n        setError(editingCategory ? 'Failed to update category' : 'Category name already exists for this type');\n      } else {\n        setError(editingCategory ? 'Failed to update category' : 'Failed to create category');\n      }\n      console.error('Category operation error:', err);\n    }\n  };\n\n  const handleDelete = async (categoryId: number, isDefault: boolean) => {\n    if (isDefault) {\n      setError('Cannot delete default categories');\n      return;\n    }\n\n    if (window.confirm('Are you sure you want to delete this category? This action cannot be undone.')) {\n      try {\n        setError(null);\n        await categoryApi.delete(categoryId);\n        loadCategories();\n      } catch (err) {\n        setError('Failed to delete category. It may still have associated transactions.');\n        console.error('Error deleting category:', err);\n      }\n    }\n  };\n\n  const handleEdit = (category: Category) => {\n    setFormData({\n      name: category.name,\n      description: category.description || '',\n      type: category.type\n    });\n    setEditingCategory(category);\n    setShowForm(true);\n    setError(null);\n  };\n\n  const handleCancelEdit = () => {\n    setShowForm(false);\n    setEditingCategory(null);\n    setFormData({\n      name: '',\n      description: '',\n      type: TransactionType.Expense,\n    });\n    setError(null);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ \n      ...prev, \n      [name]: name === 'type' ? parseInt(value) as TransactionType : value \n    }));\n  };\n\n  const formatDate = (dateString: string) => {\n    try {\n      return new Date(dateString).toLocaleDateString();\n    } catch {\n      return 'Invalid Date';\n    }\n  };\n\n  // Filter categories by type\n  const incomeCategories = categories.filter(cat => cat.type === TransactionType.Income);\n  const expenseCategories = categories.filter(cat => cat.type === TransactionType.Expense);\n\n  const CategoryActions = ({ category }: { category: Category }) => (\n    <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\n      {!category.isDefault ? (\n        <>\n          <button\n            onClick={() => handleEdit(category)}\n            className=\"btn btn-secondary\"\n            style={{ \n              padding: '0.25rem 0.5rem', \n              fontSize: '0.75rem',\n              minWidth: '50px'\n            }}\n          >\n            ✏️ Edit\n          </button>\n          <button\n            onClick={() => handleDelete(category.id, category.isDefault)}\n            className=\"btn btn-danger\"\n            style={{ \n              padding: '0.25rem 0.5rem', \n              fontSize: '0.75rem',\n              minWidth: '50px'\n            }}\n          >\n            🗑️ Delete\n          </button>\n        </>\n      ) : (\n        <span style={{ \n          color: 'rgba(255, 255, 255, 0.5)', \n          fontSize: '0.75rem',\n          fontStyle: 'italic'\n        }}>\n          System Default\n        </span>\n      )}\n    </div>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"glass-card\">\n        <div className=\"loading\">Loading categories...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'space-between', \n        alignItems: 'center', \n        marginBottom: '2rem',\n        flexWrap: 'wrap',\n        gap: '1rem'\n      }}>\n        <h2 style={{ color: 'white', margin: 0, fontSize: 'clamp(1.5rem, 4vw, 2rem)' }}>\n          Category Management\n        </h2>\n        <button\n          onClick={() => setShowForm(!showForm)}\n          className=\"btn btn-primary\"\n          style={{ whiteSpace: 'nowrap' }}\n        >\n          {showForm ? 'Cancel' : '+ Add Category'}\n        </button>\n      </div>\n\n      {error && (\n        <div className=\"glass-card\" style={{ marginBottom: '1rem' }}>\n          <div style={{ color: '#f87171', textAlign: 'center', padding: '1rem' }}>\n            {error}\n          </div>\n          <button\n            onClick={() => setError(null)}\n            style={{\n              position: 'absolute',\n              top: '0.5rem',\n              right: '0.5rem',\n              background: 'none',\n              border: 'none',\n              color: '#f87171',\n              fontSize: '1.5rem',\n              cursor: 'pointer',\n              padding: '0.25rem',\n              borderRadius: '4px',\n            }}\n          >\n            ×\n          </button>\n        </div>\n      )}\n\n      {/* Add/Edit Category Form */}\n      {showForm && (\n        <div className=\"glass-card\" style={{ marginBottom: '2rem' }}>\n          <h3 style={{ color: 'white', marginBottom: '1rem' }}>\n            {editingCategory ? 'Edit Category' : 'Add New Category'}\n          </h3>\n          \n          <form onSubmit={handleSubmit}>\n            <div style={{ \n              display: 'grid', \n              gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', \n              gap: '1rem',\n              marginBottom: '1rem'\n            }}>\n              <div>\n                <label className=\"form-label\">Category Name *</label>\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleInputChange}\n                  className=\"form-control\"\n                  placeholder=\"Enter category name\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"form-label\">Type</label>\n                <select\n                  name=\"type\"\n                  value={formData.type}\n                  onChange={handleInputChange}\n                  className=\"form-control\"\n                  style={{ \n                    color: 'white',\n                    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                  }}\n                >\n                  <option value={TransactionType.Income} style={{ backgroundColor: '#1f2937', color: 'white' }}>\n                    Income\n                  </option>\n                  <option value={TransactionType.Expense} style={{ backgroundColor: '#1f2937', color: 'white' }}>\n                    Expense\n                  </option>\n                </select>\n              </div>\n            </div>\n\n            <div style={{ marginBottom: '1rem' }}>\n              <label className=\"form-label\">Description</label>\n              <textarea\n                name=\"description\"\n                value={formData.description}\n                onChange={handleInputChange}\n                className=\"form-control\"\n                placeholder=\"Optional description\"\n                rows={2}\n              />\n            </div>\n\n            <div style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}>\n              <button type=\"submit\" className=\"btn btn-primary\">\n                {editingCategory ? 'Update Category' : 'Create Category'}\n              </button>\n              <button \n                type=\"button\" \n                className=\"btn btn-secondary\"\n                onClick={handleCancelEdit}\n              >\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n\n      {/* Income Categories */}\n      <div className=\"glass-card\" style={{ marginBottom: '2rem' }}>\n        <h3 style={{ color: '#4ade80', marginBottom: '1.5rem', textAlign: 'center' }}>\n          💰 Income Categories ({incomeCategories.length})\n        </h3>\n        \n        {incomeCategories.length > 0 ? (\n          <div className=\"table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Default</th>\n                  <th>Created</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {incomeCategories.map((category) => (\n                  <tr key={category.id}>\n                    <td>\n                      <div>\n                        <div style={{ fontWeight: '600', color: 'white' }}>\n                          {category.name}\n                        </div>\n                        {category.description && (\n                          <div style={{ \n                            fontSize: '0.8rem', \n                            color: 'rgba(255, 255, 255, 0.7)',\n                            marginTop: '0.25rem'\n                          }}>\n                            {category.description}\n                          </div>\n                        )}\n                      </div>\n                    </td>\n                    <td>\n                      {category.isDefault ? (\n                        <span style={{ color: '#4ade80' }}>Yes</span>\n                      ) : (\n                        <span style={{ color: 'rgba(255, 255, 255, 0.7)' }}>No</span>\n                      )}\n                    </td>\n                    <td>{formatDate(category.createdAt)}</td>\n                    <td>\n                      <CategoryActions category={category} />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <div style={{ \n            textAlign: 'center', \n            color: 'rgba(255, 255, 255, 0.7)', \n            padding: '2rem' \n          }}>\n            No income categories found\n          </div>\n        )}\n      </div>\n\n      {/* Expense Categories */}\n      <div className=\"glass-card\">\n        <h3 style={{ color: '#f87171', marginBottom: '1.5rem', textAlign: 'center' }}>\n          💸 Expense Categories ({expenseCategories.length})\n        </h3>\n        \n        {expenseCategories.length > 0 ? (\n          <div className=\"table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Default</th>\n                  <th>Created</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {expenseCategories.map((category) => (\n                  <tr key={category.id}>\n                    <td>\n                      <div>\n                        <div style={{ fontWeight: '600', color: 'white' }}>\n                          {category.name}\n                        </div>\n                        {category.description && (\n                          <div style={{ \n                            fontSize: '0.8rem', \n                            color: 'rgba(255, 255, 255, 0.7)',\n                            marginTop: '0.25rem'\n                          }}>\n                            {category.description}\n                          </div>\n                        )}\n                      </div>\n                    </td>\n                    <td>\n                      {category.isDefault ? (\n                        <span style={{ color: '#4ade80' }}>Yes</span>\n                      ) : (\n                        <span style={{ color: 'rgba(255, 255, 255, 0.7)' }}>No</span>\n                      )}\n                    </td>\n                    <td>{formatDate(category.createdAt)}</td>\n                    <td>\n                      <CategoryActions category={category} />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <div style={{ \n            textAlign: 'center', \n            color: 'rgba(255, 255, 255, 0.7)', \n            padding: '2rem' \n          }}>\n            No expense categories found\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default CategoryManager;"],"names":["api","axios","create","baseURL","headers","TransactionType","transactionApi","getAll","params","get","getById","id","concat","transaction","post","update","put","delete","getSummary","fromDate","toDate","deleteAll","categoryApi","type","category","accountApi","account","adjustBalance","amount","transfer","data","memo","_ref","onBack","categories","setCategories","useState","loading","setLoading","error","setError","showForm","setShowForm","editingCategory","setEditingCategory","formData","setFormData","name","description","Expense","useEffect","loadCategories","async","response","err","console","handleInputChange","e","value","target","prev","_objectSpread","parseInt","formatDate","dateString","Date","toLocaleDateString","_unused","incomeCategories","filter","cat","Income","expenseCategories","CategoryActions","_ref2","_jsx","style","display","gap","flexWrap","children","isDefault","color","fontSize","fontStyle","_jsxs","_Fragment","onClick","handleEdit","className","padding","minWidth","categoryId","window","confirm","handleDelete","justifyContent","alignItems","marginBottom","margin","whiteSpace","textAlign","position","top","right","background","border","cursor","borderRadius","onSubmit","preventDefault","trim","_err$response","status","gridTemplateColumns","onChange","placeholder","required","backgroundColor","rows","handleCancelEdit","length","map","fontWeight","marginTop","createdAt"],"sourceRoot":""}