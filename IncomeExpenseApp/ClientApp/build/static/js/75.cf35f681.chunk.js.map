{"version":3,"file":"static/js/75.cf35f681.chunk.js","mappings":"qKAQA,MA4SA,EA5SwDA,IAA4B,IAA3B,UAAEC,EAAS,OAAEC,GAAQF,EAC5E,MAAOG,EAAUC,IAAeC,EAAAA,EAAAA,UAA+B,CAC7DC,YAAa,GACbC,OAAQ,EACRC,KAAMC,EAAAA,GAAgBC,QACtBC,SAAU,GACVC,UAAW,EACXC,MAAM,IAAIC,MAAOC,cAAcC,MAAM,KAAK,MAGrCC,EAAYC,IAAiBb,EAAAA,EAAAA,UAAqB,KAClDc,EAAUC,IAAef,EAAAA,EAAAA,UAAoB,KAC7CgB,EAASC,IAAcjB,EAAAA,EAAAA,WAAS,IAChCkB,EAAOC,IAAYnB,EAAAA,EAAAA,UAAwB,OAC3CoB,EAASC,IAAcrB,EAAAA,EAAAA,WAAS,IAEvCsB,EAAAA,EAAAA,WAAU,KACRC,IACAC,KACC,CAAC1B,EAASK,OAEb,MAAMoB,EAAiBE,UACrB,IACE,MAAMC,QAAiBC,EAAAA,GAAYC,OAAO9B,EAASK,MACnDU,EAAca,EAASG,MAEnBH,EAASG,KAAKC,OAAS,IAAMhC,EAASQ,UACxCP,EAAYgC,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAEzB,SAAUoB,EAASG,KAAK,GAAGI,OAE/D,CAAE,MAAOC,GACPC,QAAQjB,MAAM,6BAA8BgB,EAC9C,GAGIV,EAAeC,UACnB,IACE,MAAMC,QAAiBU,EAAAA,GAAWR,SAGlC,GAFAb,EAAYW,EAASG,MAEjBH,EAASG,KAAKC,OAAS,IAAMhC,EAASS,UAAW,CACnD,MAAM8B,EAAcX,EAASG,KAAKS,KAAKC,GAAoB,SAAbA,EAAIN,OAAoBP,EAASG,KAAK,GACpF9B,EAAYgC,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAExB,UAAW8B,EAAYG,KACzD,CACF,CAAE,MAAON,GACPC,QAAQjB,MAAM,2BAA4BgB,EAC5C,GAGIO,EAAqBC,IACzB,MAAM,KAAET,EAAI,MAAEU,GAAUD,EAAEE,OAC1B7C,EAAYgC,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXD,GAAI,IACP,CAACE,GAAgB,WAATA,EAAoBY,WAAWF,IAAU,EAChC,SAATV,EAAkBa,SAASH,GAA4BA,MA2CnE,OACEI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAaG,MAAO,CAAEC,SAAU,QAASC,OAAQ,SAAUC,QAAS,UAAWL,SAAA,EAC5FC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CACVI,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,aAAc,SACdC,SAAU,OACVC,IAAK,QACLX,SAAA,EACAF,EAAAA,EAAAA,KAAA,MAAII,MAAO,CACTU,MAAO,QACPR,OAAQ,EACRS,SAAU,gCACVb,SAAC,iCAGFpD,IACCkD,EAAAA,EAAAA,KAAA,UACEgB,QAASlE,EACTmD,UAAU,oBACVG,MAAO,CAAEW,SAAU,WAAYR,QAAS,eAAgBL,SACzD,mBAMJ/B,IACC6B,EAAAA,EAAAA,KAAA,OAAKI,MAAO,CACVa,WAAY,2BACZC,OAAQ,oBACRJ,MAAO,UACPP,QAAS,OACTY,aAAc,MACdR,aAAc,QACdT,SACC/B,IAIJE,IACC2B,EAAAA,EAAAA,KAAA,OAAKI,MAAO,CACVa,WAAY,0BACZC,OAAQ,oBACRJ,MAAO,UACPP,QAAS,OACTY,aAAc,MACdR,aAAc,QACdT,SAAC,uCAKLC,EAAAA,EAAAA,MAAA,QAAMiB,SA9FS1C,UAGnB,GAFAiB,EAAE0B,iBAEEtE,EAASI,QAAU,IAAMJ,EAASQ,WAAaR,EAASS,UAC1DY,EAAS,uEAIX,IAAK,IAADkD,EACFpD,GAAW,GACXE,EAAS,YAEHmD,EAAAA,GAAeC,OAAOzE,GAE5BuB,GAAW,GACXtB,EAAY,CACVE,YAAa,GACbC,OAAQ,EACRC,KAAMC,EAAAA,GAAgBC,QACtBC,SAAUM,EAAWkB,OAAS,EAAIlB,EAAW,GAAGqB,KAAO,GACvD1B,UAAWO,EAASgB,OAAS,GAA8C,QAAzCuC,EAAAvD,EAASwB,KAAKC,GAAoB,SAAbA,EAAIN,aAAgB,IAAAoC,OAAA,EAAzCA,EAA2C7B,KAAM1B,EAAS,GAAG0B,GAAM,EACrGhC,MAAM,IAAIC,MAAOC,cAAcC,MAAM,KAAK,KAG5C6D,WAAW,KACTnD,GAAW,GACPzB,GACFA,KAED,IAEL,CAAE,MAAOsC,GACPf,EAAS,gCACTgB,QAAQjB,MAAM,8BAA+BgB,EAC/C,CAAC,QACCjB,GAAW,EACb,GA0DiCgC,SAAA,EAE3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAaG,MAAO,CAAEO,aAAc,WAAYT,SAAA,EAC7DF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAaG,MAAO,CAAEW,SAAU,WAAYJ,aAAc,WAAYT,SAAC,eACxFF,EAAAA,EAAAA,KAAA,UACEd,KAAK,YACLU,MAAO7C,EAASS,UAChBkE,SAAUhC,EACVO,UAAU,eACVG,MAAO,CACLU,MAAO,QACPa,gBAAiB,wBACjBT,OAAQ,qCACRX,QAAS,SACTQ,SAAU,YAEZa,UAAQ,EAAA1B,SAEPnC,EAAS8D,IAAKC,IACb3B,EAAAA,EAAAA,MAAA,UAAyBP,MAAOkC,EAAQrC,GAAIW,MAAO,CAAEuB,gBAAiB,UAAWb,MAAO,SAAUZ,SAAA,CAC/F4B,EAAQC,KAAK,IAAED,EAAQ5C,KAAK,WAAI4C,EAAQE,QAAQC,QAAQ,GAAG,MADjDH,EAAQrC,WAQ3BU,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CACVI,QAAS,OACT0B,oBAAqB,uCACrBrB,IAAK,UACLF,aAAc,WACdT,SAAA,EACAC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAaG,MAAO,CAAEO,aAAc,KAAMT,SAAA,EACvDF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAaG,MAAO,CAAEW,SAAU,WAAYJ,aAAc,WAAYT,SAAC,YACxFC,EAAAA,EAAAA,MAAA,UACEjB,KAAK,OACLU,MAAO7C,EAASK,KAChBsE,SAAUhC,EACVO,UAAU,eACVG,MAAO,CACLU,MAAO,QACPa,gBAAiB,wBACjBT,OAAQ,qCACRX,QAAS,SACTQ,SAAU,YAEZa,UAAQ,EAAA1B,SAAA,EAERF,EAAAA,EAAAA,KAAA,UAAQJ,MAAOvC,EAAAA,GAAgBC,QAAS8C,MAAO,CAAEuB,gBAAiB,UAAWb,MAAO,SAAUZ,SAAC,0BAG/FF,EAAAA,EAAAA,KAAA,UAAQJ,MAAOvC,EAAAA,GAAgB8E,OAAQ/B,MAAO,CAAEuB,gBAAiB,UAAWb,MAAO,SAAUZ,SAAC,+BAMlGC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAaG,MAAO,CAAEO,aAAc,KAAMT,SAAA,EACvDF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAaG,MAAO,CAAEW,SAAU,WAAYJ,aAAc,WAAYT,SAAC,cACxFF,EAAAA,EAAAA,KAAA,SACE5C,KAAK,SACL8B,KAAK,SACLU,MAAO7C,EAASI,QAAU,GAC1BuE,SAAUhC,EACVO,UAAU,eACVG,MAAO,CAAEG,QAAS,SAAUQ,SAAU,YACtCqB,YAAY,OACZC,IAAI,OACJC,KAAK,OACLV,UAAQ,QAIZzB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAaG,MAAO,CAAEO,aAAc,KAAMT,SAAA,EACvDF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAaG,MAAO,CAAEW,SAAU,WAAYJ,aAAc,WAAYT,SAAC,YACxFF,EAAAA,EAAAA,KAAA,SACE5C,KAAK,OACL8B,KAAK,OACLU,MAAO7C,EAASU,KAChBiE,SAAUhC,EACVO,UAAU,eACVG,MAAO,CAAEG,QAAS,SAAUQ,SAAU,YACtCa,UAAQ,WAMdzB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAaG,MAAO,CAAEO,aAAc,WAAYT,SAAA,EAC7DF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAaG,MAAO,CAAEW,SAAU,WAAYJ,aAAc,WAAYT,SAAC,gBACxFC,EAAAA,EAAAA,MAAA,UACEjB,KAAK,WACLU,MAAO7C,EAASQ,SAChBmE,SAAUhC,EACVO,UAAU,eACVG,MAAO,CACLU,MAAO,QACPa,gBAAiB,wBACjBT,OAAQ,qCACRX,QAAS,SACTQ,SAAU,YAEZa,UAAQ,EAAA1B,SAAA,EAERF,EAAAA,EAAAA,KAAA,UAAQJ,MAAM,GAAGQ,MAAO,CAAEuB,gBAAiB,UAAWb,MAAO,SAAUZ,SAAC,oBAGvErC,EAAWgE,IAAKtE,IACfyC,EAAAA,EAAAA,KAAA,UAA0BJ,MAAOrC,EAAS2B,KAAMkB,MAAO,CAAEuB,gBAAiB,UAAWb,MAAO,SAAUZ,SACnG3C,EAAS2B,MADC3B,EAASkC,YAQ5BU,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAaG,MAAO,CAAEO,aAAc,QAAST,SAAA,EAC1DF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAaG,MAAO,CAAEW,SAAU,WAAYJ,aAAc,WAAYT,SAAC,iBACxFF,EAAAA,EAAAA,KAAA,YACEd,KAAK,cACLU,MAAO7C,EAASG,YAChBwE,SAAUhC,EACVO,UAAU,eACVG,MAAO,CAAEG,QAAS,SAAUQ,SAAU,WAAYwB,UAAW,QAC7DH,YAAY,2CACZI,KAAM,QAIVxC,EAAAA,EAAAA,KAAA,UACE5C,KAAK,SACL6C,UAAU,kBACVwC,SAAUxE,EACVmC,MAAO,CACLsC,MAAO,OACPnC,QAAS,eACTQ,SAAU,WACV4B,WAAY,OACZzC,SAEDjC,EAAU,cAAgB,sC,6DCzSvC,MAEM2E,E,OAAMC,EAAMrB,OAAO,CACvBsB,QAHmB,OAInBC,QAAS,CACP,eAAgB,sBAyFb,IAiBK1F,EAAe,SAAfA,GAAe,OAAfA,EAAAA,EAAe,mBAAfA,EAAAA,EAAe,qBAAfA,CAAe,MAMpB,MAAMkE,EAAiB,CAE5B1C,OAASmE,GAOHJ,EAAIK,IAAmB,gBAAiB,CAAED,WAGhDE,QAAUzD,GAAemD,EAAIK,IAAG,iBAAAE,OAA+B1D,IAG/D+B,OAAS4B,GACPR,EAAIS,KAAkB,gBAAiBD,GAGzCE,OAAQA,CAAC7D,EAAY2D,IACnBR,EAAIW,IAAG,iBAAAJ,OAA+B1D,GAAM2D,GAG9CI,OAAS/D,GAAemD,EAAIY,OAAO,iBAADL,OAAkB1D,IAGpDgE,WAAYA,CAACC,EAAmBC,IAC9Bf,EAAIK,IAAa,wBAAyB,CACxCD,OAAQ,CAAEU,WAAUC,YAIxBC,UAAWA,IAAMhB,EAAIY,OAAO,sBAGjB5E,EAAc,CAEzBC,OAASzB,GACPwF,EAAIK,IAAgB,cAAe,CAAED,OAAQ,CAAE5F,UAGjD8F,QAAUzD,GAAemD,EAAIK,IAAG,eAAAE,OAA0B1D,IAG1D+B,OAASjE,GACPqF,EAAIS,KAAe,cAAe9F,GAGpC+F,OAAQA,CAAC7D,EAAYlC,IACnBqF,EAAIW,IAAG,eAAAJ,OAA0B1D,GAAMlC,GAGzCiG,OAAS/D,GAAemD,EAAIY,OAAO,eAADL,OAAgB1D,KAGvCJ,EAAa,CAExBR,OAAQA,IAAM+D,EAAIK,IAAe,aAGjCC,QAAUzD,GAAemD,EAAIK,IAAG,aAAAE,OAAuB1D,IAGvD+B,OAASM,GACPc,EAAIS,KAAc,YAAavB,GAGjCwB,OAAQA,CAAC7D,EAAYqC,IACnBc,EAAIW,IAAG,aAAAJ,OAAuB1D,GAAMqC,GAGtC0B,OAAS/D,GAAemD,EAAIY,OAAO,aAADL,OAAc1D,IAGhDoE,cAAeA,CAACpE,EAAYtC,IAC1ByF,EAAIS,KAAK,aAADF,OAAc1D,EAAE,mBAAmB,CAAEtC,WAG/C2G,SAAWhF,GAAsB8D,EAAIS,KAAK,qBAAsBvE,G","sources":["components/TransactionForm.tsx","services/api.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { transactionApi, categoryApi, accountApi, TransactionCreateDto, Category, TransactionType, Account } from '../services/api';\n\ninterface TransactionFormProps {\n  onSuccess?: () => void;\n  onBack?: () => void;\n}\n\nconst TransactionForm: React.FC<TransactionFormProps> = ({ onSuccess, onBack }) => {\n  const [formData, setFormData] = useState<TransactionCreateDto>({\n    description: '',\n    amount: 0,\n    type: TransactionType.Expense,\n    category: '',\n    accountId: 1, // Default to Cash account (ID 1)\n    date: new Date().toISOString().split('T')[0],\n  });\n\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [accounts, setAccounts] = useState<Account[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n\n  useEffect(() => {\n    loadCategories();\n    loadAccounts();\n  }, [formData.type]);\n\n  const loadCategories = async () => {\n    try {\n      const response = await categoryApi.getAll(formData.type);\n      setCategories(response.data);\n      // Auto-select first category if none selected\n      if (response.data.length > 0 && !formData.category) {\n        setFormData(prev => ({ ...prev, category: response.data[0].name }));\n      }\n    } catch (err) {\n      console.error('Failed to load categories:', err);\n    }\n  };\n\n  const loadAccounts = async () => {\n    try {\n      const response = await accountApi.getAll();\n      setAccounts(response.data);\n      // Auto-select Cash account (ID 1) if none selected, or first account as fallback\n      if (response.data.length > 0 && !formData.accountId) {\n        const cashAccount = response.data.find(acc => acc.name === 'Cash') || response.data[0];\n        setFormData(prev => ({ ...prev, accountId: cashAccount.id }));\n      }\n    } catch (err) {\n      console.error('Failed to load accounts:', err);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: name === 'amount' ? parseFloat(value) || 0 : \n              name === 'type' ? parseInt(value) as TransactionType : value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.amount <= 0 || !formData.category || !formData.accountId) {\n      setError('Please fill in all required fields (amount, category, account)');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      await transactionApi.create(formData);\n      \n      setSuccess(true);\n      setFormData({\n        description: '',\n        amount: 0,\n        type: TransactionType.Expense,\n        category: categories.length > 0 ? categories[0].name : '',\n        accountId: accounts.length > 0 ? (accounts.find(acc => acc.name === 'Cash')?.id || accounts[0].id) : 1,\n        date: new Date().toISOString().split('T')[0],\n      });\n\n      setTimeout(() => {\n        setSuccess(false);\n        if (onSuccess) {\n          onSuccess();\n        }\n      }, 2000);\n\n    } catch (err) {\n      setError('Failed to create transaction');\n      console.error('Transaction creation error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"form-container\">\n      <div className=\"glass-card\" style={{ maxWidth: '600px', margin: '0 auto', padding: '1.5rem' }}>\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center', \n          marginBottom: '1.5rem',\n          flexWrap: 'wrap',\n          gap: '1rem'\n        }}>\n          <h2 style={{ \n            color: 'white', \n            margin: 0, \n            fontSize: 'clamp(1.25rem, 3vw, 1.75rem)'\n          }}>\n            💰 Add Transaction\n          </h2>\n          {onBack && (\n            <button\n              onClick={onBack}\n              className=\"btn btn-secondary\"\n              style={{ fontSize: '0.875rem', padding: '0.5rem 1rem' }}\n            >\n              ← Back\n            </button>\n          )}\n        </div>\n\n        {error && (\n          <div style={{ \n            background: 'rgba(248, 113, 113, 0.1)', \n            border: '1px solid #f87171', \n            color: '#f87171',\n            padding: '1rem',\n            borderRadius: '8px',\n            marginBottom: '1rem'\n          }}>\n            {error}\n          </div>\n        )}\n\n        {success && (\n          <div style={{ \n            background: 'rgba(74, 222, 128, 0.1)', \n            border: '1px solid #4ade80', \n            color: '#4ade80',\n            padding: '1rem',\n            borderRadius: '8px',\n            marginBottom: '1rem'\n          }}>\n            Transaction created successfully!\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit}>\n          {/* First Row: Account Selection */}\n          <div className=\"form-group\" style={{ marginBottom: '0.75rem' }}>\n            <label className=\"form-label\" style={{ fontSize: '0.875rem', marginBottom: '0.25rem' }}>Account *</label>\n            <select\n              name=\"accountId\"\n              value={formData.accountId}\n              onChange={handleInputChange}\n              className=\"form-control\"\n              style={{ \n                color: 'white',\n                backgroundColor: 'rgba(30, 41, 59, 0.8)',\n                border: '1px solid rgba(255, 255, 255, 0.2)',\n                padding: '0.5rem',\n                fontSize: '0.875rem'\n              }}\n              required\n            >\n              {accounts.map((account) => (\n                <option key={account.id} value={account.id} style={{ backgroundColor: '#1e293b', color: 'white' }}>\n                  {account.icon} {account.name} (৳{account.balance.toFixed(2)})\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Second Row: Type, Amount, Date */}\n          <div style={{ \n            display: 'grid', \n            gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', \n            gap: '0.75rem',\n            marginBottom: '0.75rem'\n          }}>\n            <div className=\"form-group\" style={{ marginBottom: '0' }}>\n              <label className=\"form-label\" style={{ fontSize: '0.875rem', marginBottom: '0.25rem' }}>Type *</label>\n              <select\n                name=\"type\"\n                value={formData.type}\n                onChange={handleInputChange}\n                className=\"form-control\"\n                style={{ \n                  color: 'white',\n                  backgroundColor: 'rgba(30, 41, 59, 0.8)',\n                  border: '1px solid rgba(255, 255, 255, 0.2)',\n                  padding: '0.5rem',\n                  fontSize: '0.875rem'\n                }}\n                required\n              >\n                <option value={TransactionType.Expense} style={{ backgroundColor: '#1e293b', color: 'white' }}>\n                  💸 Expense\n                </option>\n                <option value={TransactionType.Income} style={{ backgroundColor: '#1e293b', color: 'white' }}>\n                  💰 Income\n                </option>\n              </select>\n            </div>\n\n            <div className=\"form-group\" style={{ marginBottom: '0' }}>\n              <label className=\"form-label\" style={{ fontSize: '0.875rem', marginBottom: '0.25rem' }}>Amount *</label>\n              <input\n                type=\"number\"\n                name=\"amount\"\n                value={formData.amount || ''}\n                onChange={handleInputChange}\n                className=\"form-control\"\n                style={{ padding: '0.5rem', fontSize: '0.875rem' }}\n                placeholder=\"0.00\"\n                min=\"0.01\"\n                step=\"0.01\"\n                required\n              />\n            </div>\n\n            <div className=\"form-group\" style={{ marginBottom: '0' }}>\n              <label className=\"form-label\" style={{ fontSize: '0.875rem', marginBottom: '0.25rem' }}>Date *</label>\n              <input\n                type=\"date\"\n                name=\"date\"\n                value={formData.date}\n                onChange={handleInputChange}\n                className=\"form-control\"\n                style={{ padding: '0.5rem', fontSize: '0.875rem' }}\n                required\n              />\n            </div>\n          </div>\n\n          {/* Third Row: Category */}\n          <div className=\"form-group\" style={{ marginBottom: '0.75rem' }}>\n            <label className=\"form-label\" style={{ fontSize: '0.875rem', marginBottom: '0.25rem' }}>Category *</label>\n            <select\n              name=\"category\"\n              value={formData.category}\n              onChange={handleInputChange}\n              className=\"form-control\"\n              style={{ \n                color: 'white',\n                backgroundColor: 'rgba(30, 41, 59, 0.8)',\n                border: '1px solid rgba(255, 255, 255, 0.2)',\n                padding: '0.5rem',\n                fontSize: '0.875rem'\n              }}\n              required\n            >\n              <option value=\"\" style={{ backgroundColor: '#1e293b', color: 'white' }}>\n                Select category\n              </option>\n              {categories.map((category) => (\n                <option key={category.id} value={category.name} style={{ backgroundColor: '#1e293b', color: 'white' }}>\n                  {category.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Fourth Row: Description (textarea like notes) */}\n          <div className=\"form-group\" style={{ marginBottom: '1rem' }}>\n            <label className=\"form-label\" style={{ fontSize: '0.875rem', marginBottom: '0.25rem' }}>Description</label>\n            <textarea\n              name=\"description\"\n              value={formData.description}\n              onChange={handleInputChange}\n              className=\"form-control\"\n              style={{ padding: '0.5rem', fontSize: '0.875rem', minHeight: '60px' }}\n              placeholder=\"Enter transaction description (optional)\"\n              rows={2}\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            disabled={loading}\n            style={{ \n              width: '100%',\n              padding: '0.75rem 1rem',\n              fontSize: '0.875rem',\n              fontWeight: '600'\n            }}\n          >\n            {loading ? 'Creating...' : '✅ Create Transaction'}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionForm;","import axios from 'axios';\n\n// API configuration - use relative path since React and API are served from same server\nconst API_BASE_URL = '/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Types\nexport interface Transaction {\n  id: number;\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  accountId: number;\n  accountName?: string;\n  accountIcon?: string;\n  date: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TransactionCreateDto {\n  description: string;\n  amount: number;\n  type: TransactionType;\n  category: string;\n  accountId: number;\n  date: string;\n}\n\nexport interface TransactionUpdateDto {\n  description?: string;\n  amount?: number;\n  type?: TransactionType;\n  category?: string;\n  accountId?: number;\n  date?: string;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  description?: string;\n  type: TransactionType;\n  isDefault: boolean;\n  createdAt: string;\n  transactionCount?: number;\n  totalAmount?: number;\n}\n\nexport interface CategoryCreateDto {\n  name: string;\n  description?: string;\n  type: TransactionType;\n}\n\nexport interface Account {\n  id: number;\n  name: string;\n  description?: string;\n  type: AccountType;\n  icon: string;\n  balance: number;\n  isDefault: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TransferDto {\n  fromAccountId: number;\n  toAccountId: number;\n  amount: number;\n  description?: string;\n  date: string;\n}\n\nexport interface AccountCreateDto {\n  name: string;\n  description?: string;\n  type: AccountType;\n  icon: string;\n}\n\nexport interface AccountUpdateDto {\n  name?: string;\n  description?: string;\n  type?: AccountType;\n  icon?: string;\n}\n\nexport enum AccountType {\n  Cash = 0,\n  Bank = 1,\n  CreditCard = 2,\n  Investment = 3,\n  Savings = 4,\n  Other = 5,\n}\n\nexport interface Summary {\n  totalIncome: number;\n  totalExpense: number;\n  balance: number;\n  fromDate?: string;\n  toDate?: string;\n}\n\nexport enum TransactionType {\n  Income = 1,\n  Expense = 2,\n}\n\n// API functions\nexport const transactionApi = {\n  // Get all transactions with optional filters\n  getAll: (params?: {\n    type?: TransactionType;\n    category?: string;\n    fromDate?: string;\n    toDate?: string;\n    page?: number;\n    pageSize?: number;\n  }) => api.get<Transaction[]>('/transactions', { params }),\n\n  // Get transaction by ID\n  getById: (id: number) => api.get<Transaction>(`/transactions/${id}`),\n\n  // Create new transaction\n  create: (transaction: TransactionCreateDto) => \n    api.post<Transaction>('/transactions', transaction),\n\n  // Update transaction\n  update: (id: number, transaction: TransactionUpdateDto) => \n    api.put<Transaction>(`/transactions/${id}`, transaction),\n\n  // Delete transaction\n  delete: (id: number) => api.delete(`/transactions/${id}`),\n\n  // Get summary\n  getSummary: (fromDate?: string, toDate?: string) => \n    api.get<Summary>('/transactions/summary', { \n      params: { fromDate, toDate } \n    }),\n\n  // Delete all transactions\n  deleteAll: () => api.delete('/transactions/all'),\n};\n\nexport const categoryApi = {\n  // Get all categories with optional type filter\n  getAll: (type?: TransactionType) => \n    api.get<Category[]>('/categories', { params: { type } }),\n\n  // Get category by ID\n  getById: (id: number) => api.get<Category>(`/categories/${id}`),\n\n  // Create new category\n  create: (category: CategoryCreateDto) => \n    api.post<Category>('/categories', category),\n\n  // Update category\n  update: (id: number, category: Partial<CategoryCreateDto>) => \n    api.put<Category>(`/categories/${id}`, category),\n\n  // Delete category\n  delete: (id: number) => api.delete(`/categories/${id}`),\n};\n\nexport const accountApi = {\n  // Get all accounts\n  getAll: () => api.get<Account[]>('/accounts'),\n\n  // Get account by ID\n  getById: (id: number) => api.get<Account>(`/accounts/${id}`),\n\n  // Create new account\n  create: (account: AccountCreateDto) => \n    api.post<Account>('/accounts', account),\n\n  // Update account\n  update: (id: number, account: AccountUpdateDto) => \n    api.put<Account>(`/accounts/${id}`, account),\n\n  // Delete account\n  delete: (id: number) => api.delete(`/accounts/${id}`),\n\n  // Adjust account balance\n  adjustBalance: (id: number, amount: number) => \n    api.post(`/accounts/${id}/adjust-balance`, { amount }),\n    \n  // Transfer money between accounts\n  transfer: (data: TransferDto) => api.post('/accounts/transfer', data),\n};\n\nexport default api;"],"names":["_ref","onSuccess","onBack","formData","setFormData","useState","description","amount","type","TransactionType","Expense","category","accountId","date","Date","toISOString","split","categories","setCategories","accounts","setAccounts","loading","setLoading","error","setError","success","setSuccess","useEffect","loadCategories","loadAccounts","async","response","categoryApi","getAll","data","length","prev","_objectSpread","name","err","console","accountApi","cashAccount","find","acc","id","handleInputChange","e","value","target","parseFloat","parseInt","_jsx","className","children","_jsxs","style","maxWidth","margin","padding","display","justifyContent","alignItems","marginBottom","flexWrap","gap","color","fontSize","onClick","background","border","borderRadius","onSubmit","preventDefault","_accounts$find","transactionApi","create","setTimeout","onChange","backgroundColor","required","map","account","icon","balance","toFixed","gridTemplateColumns","Income","placeholder","min","step","minHeight","rows","disabled","width","fontWeight","api","axios","baseURL","headers","params","get","getById","concat","transaction","post","update","put","delete","getSummary","fromDate","toDate","deleteAll","adjustBalance","transfer"],"sourceRoot":""}